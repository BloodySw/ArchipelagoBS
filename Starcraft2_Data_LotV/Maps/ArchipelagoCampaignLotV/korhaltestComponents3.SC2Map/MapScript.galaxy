//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Brothers in Arms
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

//--------------------------------------------------------------------------------------------------
// Library: Chatbox
//--------------------------------------------------------------------------------------------------
// Structures
struct lib1_gs_chatbox {
    int lv_mainpanel;
    int lv_chatpanel;
    int lv_chatlabel;
    int lv_scrollupbtn;
    int lv_scrolldownbtn;
    int lv_scrollbottonbtn;
    int lv_maxmessages;
    int lv_scrollstrength;
    text[50] lv_chatmessage;
};

// Variable Declarations
lib1_gs_chatbox lib1_gv_chatbox;

// Function Declarations
text lib1_gf_getchatboxcontent ();
void lib1_gf_initchatbox (int lp_anchor, int lp_sizex, int lp_sizey, int lp_offsetx, int lp_offsety);
void lib1_gf_showhidechatbox (int lp_player, bool lp_visible);
void lib1_gf_sendchatmessage (int lp_fromplayer, string lp_message);

// Trigger Declarations
trigger lib1_gt_updatechatbox;
trigger lib1_gt_chatboxscrolling;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: Chatbox
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    lib1_gv_chatbox.lv_mainpanel = c_invalidDialogId;
    lib1_gv_chatbox.lv_chatpanel = c_invalidDialogId;
    lib1_gv_chatbox.lv_chatlabel = c_invalidDialogControlId;
    lib1_gv_chatbox.lv_scrollupbtn = c_invalidDialogControlId;
    lib1_gv_chatbox.lv_scrolldownbtn = c_invalidDialogControlId;
    lib1_gv_chatbox.lv_scrollbottonbtn = c_invalidDialogControlId;
    lib1_gv_chatbox.lv_maxmessages = 50;
    lib1_gv_chatbox.lv_scrollstrength = 20;
}

// Functions
text lib1_gf_getchatboxcontent () {
    // Variable Declarations
    int lv_index;
    text lv_tmptext;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_index < lib1_gv_chatbox.lv_maxmessages)) {
        lv_tmptext = (lib1_gv_chatbox.lv_chatmessage[lv_index] + StringExternal("Param/Value/lib_1_1BF9F758") + lv_tmptext);
        lv_index += 1;
    }
    return lv_tmptext;
}

void lib1_gf_initchatbox (int lp_anchor, int lp_sizex, int lp_sizey, int lp_offsetx, int lp_offsety) {
    // Variable Declarations
    int lv_btnsize;
    int lv_btnxoffset;
    int lv_chatlblsizex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_btnsize = 35;
    lv_btnxoffset = 35;
    lv_chatlblsizex = (lp_sizex - 110);

    // Implementation
    DialogCreate(lp_sizex, lp_sizey, lp_anchor, lp_offsetx, lp_offsety, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/lib_1_71F92085"));
    lib1_gv_chatbox.lv_mainpanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_btnsize, lv_btnsize, c_anchorBottomRight, lv_btnxoffset, 30, StringExternal("Param/Value/lib_1_FB15887C"), StringExternal("Param/Value/lib_1_A52FB36E"), "");
    lib1_gv_chatbox.lv_scrollbottonbtn = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_btnsize, lv_btnsize, c_anchorBottomRight, lv_btnxoffset, 65, StringExternal("Param/Value/lib_1_A91983FA"), StringExternal("Param/Value/lib_1_21E8CC9A"), "");
    lib1_gv_chatbox.lv_scrolldownbtn = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_btnsize, lv_btnsize, c_anchorBottomRight, lv_btnxoffset, 90, StringExternal("Param/Value/lib_1_8717A4C6"), StringExternal("Param/Value/lib_1_CCCD5CB5"), "");
    lib1_gv_chatbox.lv_scrollupbtn = DialogControlLastCreated();
    DialogCreate(lv_chatlblsizex, (lp_sizey - 100), lp_anchor, lp_offsetx, lp_offsety, true);
    lib1_gv_chatbox.lv_chatpanel = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelative(DialogLastCreated(), c_anchorBottomLeft, lib1_gv_chatbox.lv_mainpanel, c_anchorBottomLeft, lv_btnxoffset, -30);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_chatlblsizex, 10000, c_anchorBottom, 0, 0, StringToText(""), Color(100,100,100), false, 2.0);
    lib1_gv_chatbox.lv_chatlabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BottomLeft", PlayerGroupAll());
}

void lib1_gf_showhidechatbox (int lp_player, bool lp_visible) {
    // Variable Declarations
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pg = PlayerGroupSingle(lp_player);

    // Implementation
    DialogSetVisible(lib1_gv_chatbox.lv_mainpanel, lv_pg, true);
    DialogSetVisible(lib1_gv_chatbox.lv_chatpanel, lv_pg, true);
}

void lib1_gf_sendchatmessage (int lp_fromplayer, string lp_message) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = (lib1_gv_chatbox.lv_maxmessages - 1);

    // Implementation
    while ((lv_index > 0)) {
        lib1_gv_chatbox.lv_chatmessage[lv_index] = lib1_gv_chatbox.lv_chatmessage[(lv_index - 1)];
        lv_index -= 1;
    }
    lib1_gv_chatbox.lv_chatmessage[0] = StringToText(lp_message);
    libNtve_gf_SetDialogItemText(lib1_gv_chatbox.lv_chatlabel, lib1_gf_getchatboxcontent(), PlayerGroupAll());
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: update chatbox
//--------------------------------------------------------------------------------------------------
bool lib1_gt_updatechatbox_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_sendchatmessage(EventPlayer(), StringSub(EventChatMessage(false), 13, StringLength(EventChatMessage(false))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_updatechatbox_Init () {
    lib1_gt_updatechatbox = TriggerCreate("lib1_gt_updatechatbox_Func");
    TriggerAddEventChatMessage(lib1_gt_updatechatbox, c_playerAny, "SendMessage", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: chatbox scrolling
//--------------------------------------------------------------------------------------------------
bool lib1_gt_chatboxscrolling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentoffsety;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == lib1_gv_chatbox.lv_mainpanel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib1_gv_chatbox.lv_scrollbottonbtn)) {
        DialogControlSetPosition(lib1_gv_chatbox.lv_chatlabel, PlayerGroupSingle(EventPlayer()), c_anchorBottom, 0, 0);
    }
    else {
        lv_currentoffsety = DialogControlGetOffsetY(EventDialogControl(), EventPlayer());
        if ((EventDialogControl() == lib1_gv_chatbox.lv_scrolldownbtn)) {
            if ((lv_currentoffsety < 0)) {
                DialogControlSetPosition(lib1_gv_chatbox.lv_chatlabel, PlayerGroupSingle(EventPlayer()), c_anchorBottom, 0, (lv_currentoffsety + lib1_gv_chatbox.lv_scrollstrength));
            }

        }
        else {
            if ((EventDialogControl() == lib1_gv_chatbox.lv_scrollupbtn)) {
                DialogControlSetPosition(lib1_gv_chatbox.lv_chatlabel, PlayerGroupSingle(EventPlayer()), c_anchorBottom, 0, (lv_currentoffsety - lib1_gv_chatbox.lv_scrollstrength));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_chatboxscrolling_Init () {
    lib1_gt_chatboxscrolling = TriggerCreate("lib1_gt_chatboxscrolling_Func");
    TriggerAddEventDialogControl(lib1_gt_chatboxscrolling, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void lib1_InitTriggers () {
    lib1_gt_updatechatbox_Init();
    lib1_gt_chatboxscrolling_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library: VoidArchipelago
//--------------------------------------------------------------------------------------------------
// Variable Declarations
fixed lib2_gv_rainbowCyclePeriod;
int lib2_gv_aPOptions;
bool lib2_gv_aPMapChoice;
unit lib2_gv_aPArchipelagoCommunicate;
int lib2_gv_aPArchDataValue;
bool lib2_gv_aPInitFinished;

// Function Declarations
void lib2_gf_GiveResources (int lp_Minerals, int lp_Gas, int lp_Supply, int lp_SOAEnergy);
void lib2_gf_APUnlockLOTVBuildings (string lp_unitCode);
void lib2_gf_APUnlockSOAActiveAbilities (string lp_SOAAbilityCode);
void lib2_gf_APUnlockSOAPassiveAbilities (string lp_SOAAbilityCode);
void lib2_gf_APUnlockLOTVUpgrades (string lp_upgradeCode);
void lib2_gf_APUnlockLOTVUnits (string lp_unitCode);
int lib2_gf_APSetDifficulty (string lp_difficultyChar, unitgroup lp_casualRemoval, unitgroup lp_normalRemoval, unitgroup lp_hardRemoval, unitgroup lp_brutalRemoval);
void lib2_gf_APArchipelagoSendData (int lp_bit);
void lib2_gf_DisallowAllUpgrades ();
void lib2_gf_DisallowAllBuildings ();
void lib2_gf_EnableAllActiveSoAAbilities (bool lp_enable);
void lib2_gf_EnableAllPassiveSoAAbilities (bool lp_Enable);
void lib2_gf_GenericUnitSetting (string lp_AllowedUnit, string lp_NotAllowedUnit1, string lp_NotAllowedUnit2);
void lib2_gf_SafelyEnableUnit (abilcmd lp_SetAbility);
void lib2_gf_AllowAllUnits (bool lp_Allow);
void lib2_gf_AllowAllUnitLocking (bool lp_Allow);

// Trigger Declarations
trigger lib2_gt_Initialization;
trigger lib2_gt_ArchipelagoInitialization;
trigger lib2_gt_APArchipelagoTechUpdate;
trigger lib2_gt_APArchipelagoColorUpdate;
trigger lib2_gt_APRainbowCycle;
trigger lib2_gt_APDontHideArchipelago;
trigger lib2_gt_APSetInitFinished;
trigger lib2_gt_APPreInitMap;
trigger lib2_gt_DataMismatch;
trigger lib2_gt_APClearChat;
trigger lib2_gt_HealthCheck;
trigger lib2_gt_SoAInit;
trigger lib2_gt_TurnOnCarrier;
trigger lib2_gt_TurnOnTempest;
trigger lib2_gt_TurnOnMothership;
trigger lib2_gt_TurnOnVoidRay;
trigger lib2_gt_TurnOnDestroyer;
trigger lib2_gt_TurnOnArbiter;
trigger lib2_gt_TurnOnPhoenix;
trigger lib2_gt_TurnOnCorsair;
trigger lib2_gt_TurnOnMirage;
trigger lib2_gt_TurnOnImmortal;
trigger lib2_gt_TurnOnAnnihilator;
trigger lib2_gt_TurnOnVanguard;
trigger lib2_gt_TurnOnCollosus;
trigger lib2_gt_TurnOnReaver;
trigger lib2_gt_TurnOnWrathwalker;
trigger lib2_gt_TurnOnDarkTemplar;
trigger lib2_gt_TurnOnAvenger;
trigger lib2_gt_TurnOnBloodHunter;
trigger lib2_gt_TurnOnHighTemplar;
trigger lib2_gt_TurnOnDarkArchon;
trigger lib2_gt_TurnOnAscendant;
trigger lib2_gt_TurnOnSentry;
trigger lib2_gt_TurnOnEnergizer;
trigger lib2_gt_TurnOnHavoc;
trigger lib2_gt_TurnOnStalker;
trigger lib2_gt_TurnOnDragoon;
trigger lib2_gt_TurnOnAdept;
trigger lib2_gt_TurnOnAiurZealot;
trigger lib2_gt_TurnOnCenturion;
trigger lib2_gt_TurnOnSentinel;
trigger lib2_gt_InitTech;

// Library Initialization
void lib2_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: VoidArchipelago
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib2_InitLibraries () {
    libNtve_InitVariables();
    libVoiC_InitVariables();
    libVCMI_InitVariables();
    libVCUI_InitVariables();
}

// Variable Initialization
bool lib2_InitVariables_completed = false;

void lib2_InitVariables () {
    if (lib2_InitVariables_completed) {
        return;
    }

    lib2_InitVariables_completed = true;

    lib2_gv_rainbowCyclePeriod = 0.5;
}

// Functions
void lib2_gf_GiveResources (int lp_Minerals, int lp_Gas, int lp_Supply, int lp_SOAEnergy) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, lp_Minerals);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, lp_Gas);
    PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperAdd, lp_Supply);
    libVCMI_gf_SetSpearofAdunEnergy(lp_SOAEnergy, libVCMI_ge_SpearofAdunEnergyType_Absolute);
}

void lib2_gf_APUnlockLOTVBuildings (string lp_unitCode) {
    // Variable Declarations
    int lv_bitNumber;
    int lv_unitCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitCode = StringToInt(lp_unitCode);

    // Implementation
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        TechTreeUnitAllow(1, "PhotonCannon", true);
    }

    lv_bitNumber += 1;
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        TechTreeUnitAllow(1, "ShieldBattery", true);
    }

    lv_bitNumber += 1;
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        TechTreeUnitAllow(1, "KhaydarinMonolith", true);
    }

}

void lib2_gf_APUnlockSOAActiveAbilities (string lp_SOAAbilityCode) {
    // Variable Declarations
    int lv_bitNumber;
    int lv_abilityCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityCode = StringToInt(lp_SOAAbilityCode);

    // Implementation
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier1Power1");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier1Power2");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier1Power3");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier2Power1");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier2Power2");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier2Power3");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier4Power1");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier4Power2");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier4Power3");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier6Power1");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier6Power2");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier6Power3");
    }

}

void lib2_gf_APUnlockSOAPassiveAbilities (string lp_SOAAbilityCode) {
    // Variable Declarations
    int lv_bitNumber;
    int lv_abilityCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityCode = StringToInt(lp_SOAAbilityCode);

    // Implementation
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier3Power1");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier3Power2");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier3Power3");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier5Power1");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier5Power2");
    }

    lv_bitNumber += 1;
    if ((ModI(lv_abilityCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier5Power3");
    }

}

void lib2_gf_APUnlockLOTVUpgrades (string lp_upgradeCode) {
    // Variable Declarations
    int lv_UpgradeLevel;
    int lv_bitNumber;
    int lv_unitCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitCode = StringToInt(lp_upgradeCode);

    // Implementation
    lv_UpgradeLevel = (ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 2))) / PowI(2.0, lv_bitNumber));
    if ((lv_UpgradeLevel >= 1)) {
        TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel1", true);
        lv_UpgradeLevel -= 1;
        if ((lv_UpgradeLevel >= 1)) {
            TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel2", true);
            lv_UpgradeLevel -= 1;
            if ((lv_UpgradeLevel >= 1)) {
                TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel3", true);
            }

        }

    }

    lv_bitNumber += 2;
    lv_UpgradeLevel = (ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 2))) / PowI(2.0, lv_bitNumber));
    if ((lv_UpgradeLevel >= 1)) {
        TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel1", true);
        lv_UpgradeLevel -= 1;
        if ((lv_UpgradeLevel >= 1)) {
            TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel2", true);
            lv_UpgradeLevel -= 1;
            if ((lv_UpgradeLevel >= 1)) {
                TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel3", true);
            }

        }

    }

    lv_bitNumber += 2;
    lv_UpgradeLevel = (ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 2))) / PowI(2.0, lv_bitNumber));
    if ((lv_UpgradeLevel >= 1)) {
        TechTreeUpgradeAllow(1, "ProtossShieldsLevel1", true);
        lv_UpgradeLevel -= 1;
        if ((lv_UpgradeLevel >= 1)) {
            TechTreeUpgradeAllow(1, "ProtossShieldsLevel2", true);
            lv_UpgradeLevel -= 1;
            if ((lv_UpgradeLevel >= 1)) {
                TechTreeUpgradeAllow(1, "ProtossShieldsLevel3", true);
            }

        }

    }

    lv_bitNumber += 2;
    lv_UpgradeLevel = (ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 2))) / PowI(2.0, lv_bitNumber));
    if ((lv_UpgradeLevel >= 1)) {
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel1", true);
        lv_UpgradeLevel -= 1;
        if ((lv_UpgradeLevel >= 1)) {
            TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel2", true);
            lv_UpgradeLevel -= 1;
            if ((lv_UpgradeLevel >= 1)) {
                TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel3", true);
            }

        }

    }

    lv_bitNumber += 2;
    lv_UpgradeLevel = (ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 2))) / PowI(2.0, lv_bitNumber));
    if ((lv_UpgradeLevel >= 1)) {
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel1", true);
        lv_UpgradeLevel -= 1;
        if ((lv_UpgradeLevel >= 1)) {
            TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel2", true);
            lv_UpgradeLevel -= 1;
            if ((lv_UpgradeLevel >= 1)) {
                TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel3", true);
            }

        }

    }

}

void lib2_gf_APUnlockLOTVUnits (string lp_unitCode) {
    // Variable Declarations
    string lv_GenericUnit;
    int lv_bitNumber;
    int lv_unitCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_GenericUnit = "Zealot";
    lv_unitCode = StringToInt(lp_unitCode);

    // Implementation
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        lib2_gf_SafelyEnableUnit(AbilityCommand("SetAiurZealot", 0));
    }

    lv_bitNumber += 1;
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        lib2_gf_SafelyEnableUnit(AbilityCommand("SetCenturion", 0));
    }

    lv_bitNumber += 1;
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        lib2_gf_SafelyEnableUnit(AbilityCommand("SetSentinel", 0));
    }

    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        lib2_gf_SafelyEnableUnit(AbilityCommand("SetMirage", 0));
    }

    lv_bitNumber += 1;
    lv_GenericUnit = "HighTemplar";
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        lib2_gf_SafelyEnableUnit(AbilityCommand("SetHighTemplar", 0));
    }

    lv_bitNumber += 1;
    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        lib2_gf_SafelyEnableUnit(AbilityCommand("SetDarkArchon", 0));
    }

    if ((ModI(lv_unitCode, PowI(2.0, (lv_bitNumber + 1))) >= PowI(2.0, lv_bitNumber))) {
        lib2_gf_SafelyEnableUnit(AbilityCommand("SetMothership", 0));
    }

}

int lib2_gf_APSetDifficulty (string lp_difficultyChar, unitgroup lp_casualRemoval, unitgroup lp_normalRemoval, unitgroup lp_hardRemoval, unitgroup lp_brutalRemoval) {
    // Automatic Variable Declarations
    unitgroup autoF715B01E_g;
    int autoF715B01E_u;
    unit autoF715B01E_var;
    unitgroup autoAFCDA525_g;
    int autoAFCDA525_u;
    unit autoAFCDA525_var;
    unitgroup auto28329087_g;
    int auto28329087_u;
    unit auto28329087_var;
    unitgroup autoBA51B6A3_g;
    int autoBA51B6A3_u;
    unit autoBA51B6A3_var;

    // Implementation
    if ((lp_difficultyChar == "C")) {
        GameSetSpeedValue(c_gameSpeedNormal);
        autoF715B01E_g = lp_casualRemoval;
        autoF715B01E_u = UnitGroupCount(autoF715B01E_g, c_unitCountAll);
        for (;; autoF715B01E_u -= 1) {
            autoF715B01E_var = UnitGroupUnitFromEnd(autoF715B01E_g, autoF715B01E_u);
            if (autoF715B01E_var == null) { break; }
            UnitRemove(autoF715B01E_var);
        }
        return 1;
    }
    else {
        if ((lp_difficultyChar == "N")) {
            GameSetSpeedValue(c_gameSpeedNormal);
            autoAFCDA525_g = lp_normalRemoval;
            autoAFCDA525_u = UnitGroupCount(autoAFCDA525_g, c_unitCountAll);
            for (;; autoAFCDA525_u -= 1) {
                autoAFCDA525_var = UnitGroupUnitFromEnd(autoAFCDA525_g, autoAFCDA525_u);
                if (autoAFCDA525_var == null) { break; }
                UnitRemove(autoAFCDA525_var);
            }
            return 2;
        }
        else {
            if ((lp_difficultyChar == "H")) {
                GameSetSpeedValue(c_gameSpeedFast);
                auto28329087_g = lp_hardRemoval;
                auto28329087_u = UnitGroupCount(auto28329087_g, c_unitCountAll);
                for (;; auto28329087_u -= 1) {
                    auto28329087_var = UnitGroupUnitFromEnd(auto28329087_g, auto28329087_u);
                    if (auto28329087_var == null) { break; }
                    UnitRemove(auto28329087_var);
                }
                return 3;
            }
            else {
                if ((lp_difficultyChar == "B")) {
                    GameSetSpeedValue(c_gameSpeedFaster);
                    autoBA51B6A3_g = lp_brutalRemoval;
                    autoBA51B6A3_u = UnitGroupCount(autoBA51B6A3_g, c_unitCountAll);
                    for (;; autoBA51B6A3_u -= 1) {
                        autoBA51B6A3_var = UnitGroupUnitFromEnd(autoBA51B6A3_g, autoBA51B6A3_u);
                        if (autoBA51B6A3_var == null) { break; }
                        UnitRemove(autoBA51B6A3_var);
                    }
                    return 4;
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_2_466B2D69") + StringToText(lp_difficultyChar)));
                    return 1;
                }
            }
        }
    }
    return 1;
}

void lib2_gf_APArchipelagoSendData (int lp_bit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib2_gv_aPInitFinished == true)) {
        UnitSetPropertyFixed(lib2_gv_aPArchipelagoCommunicate, c_unitPropLife, (UnitGetPropertyInt(lib2_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropCurrent) - PowI(2.0, lp_bit)));
        lib2_gv_aPArchDataValue = (lib2_gv_aPArchDataValue + PowI(2.0, lp_bit));
    }

}

void lib2_gf_DisallowAllUpgrades () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel1", false);
    TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel2", false);
    TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel3", false);
    TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel1", false);
    TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel2", false);
    TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel3", false);
    TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel1", false);
    TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel2", false);
    TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel3", false);
    TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel1", false);
    TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel2", false);
    TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel3", false);
    TechTreeUpgradeAllow(1, "ProtossShieldsLevel1", false);
    TechTreeUpgradeAllow(1, "ProtossShieldsLevel2", false);
    TechTreeUpgradeAllow(1, "ProtossShieldsLevel3", false);
}

void lib2_gf_DisallowAllBuildings () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(1, "PhotonCannon", false);
    TechTreeUnitAllow(1, "ShieldBattery", false);
    TechTreeUnitAllow(1, "KhaydarinMonolith", false);
}

void lib2_gf_EnableAllActiveSoAAbilities (bool lp_enable) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier1Power1");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier1Power2");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier1Power3");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier2Power1");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier2Power2");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier2Power3");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier4Power1");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier4Power2");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier4Power3");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier6Power1");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier6Power2");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enable, "GPTier6Power3");
}

void lib2_gf_EnableAllPassiveSoAAbilities (bool lp_Enable) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_Enable, "GPTier3Power1");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_Enable, "GPTier3Power2");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_Enable, "GPTier3Power3");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_Enable, "GPTier5Power1");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_Enable, "GPTier5Power2");
    libVoiC_gf_EnableDisableSpearofAdunAbility(lp_Enable, "GPTier5Power3");
}

void lib2_gf_GenericUnitSetting (string lp_AllowedUnit, string lp_NotAllowedUnit1, string lp_NotAllowedUnit2) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(1, lp_AllowedUnit, true);
    TechTreeUnitAllow(1, lp_NotAllowedUnit1, false);
    TechTreeUnitAllow(1, lp_NotAllowedUnit2, false);
}

void lib2_gf_SafelyEnableUnit (abilcmd lp_SetAbility) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(1, lp_SetAbility, true);
    UnitIssueOrder(lib2_gv_aPArchipelagoCommunicate, Order(lp_SetAbility), c_orderQueueReplace);
}

void lib2_gf_AllowAllUnits (bool lp_Allow) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(1, "Zealot", lp_Allow);
    TechTreeUnitAllow(1, "ZealotAiur", lp_Allow);
    TechTreeUnitAllow(1, "ZealotShakuras", lp_Allow);
    TechTreeUnitAllow(1, "ZealotPurifier", lp_Allow);
}

void lib2_gf_AllowAllUnitLocking (bool lp_Allow) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(1, AbilityCommand("SetAiurZealot", 0), lp_Allow);
    TechTreeAbilityAllow(1, AbilityCommand("SetCenturion", 0), lp_Allow);
    TechTreeAbilityAllow(1, AbilityCommand("SetSentinel", 0), lp_Allow);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_Initialization_Init () {
    lib2_gt_Initialization = TriggerCreate("lib2_gt_Initialization_Func");
    TriggerAddEventMapInit(lib2_gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archipelago Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchipelagoInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib2_gt_APPreInitMap, true, true);
    lib1_gf_initchatbox(c_anchorTopRight, 500, 350, 0, 40);
    lib1_gf_showhidechatbox(1, true);
    TechTreeRestrictionsEnable(1, true);
    lib2_gf_AllowAllUnitLocking(false);
    TriggerExecute(lib2_gt_APClearChat, true, false);
    lib2_gf_APUnlockLOTVUnits(StringWord(EventChatMessage(false), 3));
    TriggerExecute(lib2_gt_APSetInitFinished, true, false);
    lib2_gf_APArchipelagoSendData(0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchipelagoInitialization_Init () {
    lib2_gt_ArchipelagoInitialization = TriggerCreate("lib2_gt_ArchipelagoInitialization_Func");
    TriggerAddEventChatMessage(lib2_gt_ArchipelagoInitialization, c_playerAny, "ArchipelagoLoad", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Archipelago Tech Update
//--------------------------------------------------------------------------------------------------
bool lib2_gt_APArchipelagoTechUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_APUnlockLOTVUnits(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_APArchipelagoTechUpdate_Init () {
    lib2_gt_APArchipelagoTechUpdate = TriggerCreate("lib2_gt_APArchipelagoTechUpdate_Func");
    TriggerAddEventChatMessage(lib2_gt_APArchipelagoTechUpdate, c_playerAny, "UpdateTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Archipelago Color Update
//--------------------------------------------------------------------------------------------------
bool lib2_gt_APArchipelagoColorUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto2624A6C6_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2624A6C6_val = StringWord(EventChatMessage(false), 2);
    if (auto2624A6C6_val == "16") {
        TriggerExecute(lib2_gt_APRainbowCycle, true, false);
    }
    else if (auto2624A6C6_val == "15") {
        PlayerSetColorIndex(1, 15, true);
    }
    else if (auto2624A6C6_val == "14") {
        PlayerSetColorIndex(1, 14, true);
    }
    else if (auto2624A6C6_val == "13") {
        PlayerSetColorIndex(1, 13, true);
    }
    else if (auto2624A6C6_val == "12") {
        PlayerSetColorIndex(1, 12, true);
    }
    else if (auto2624A6C6_val == "11") {
        PlayerSetColorIndex(1, 11, true);
    }
    else if (auto2624A6C6_val == "10") {
        PlayerSetColorIndex(1, 10, true);
    }
    else if (auto2624A6C6_val == "9") {
        PlayerSetColorIndex(1, 9, true);
    }
    else if (auto2624A6C6_val == "8") {
        PlayerSetColorIndex(1, 8, true);
    }
    else if (auto2624A6C6_val == "7") {
        PlayerSetColorIndex(1, 7, true);
    }
    else if (auto2624A6C6_val == "6") {
        PlayerSetColorIndex(1, 6, true);
    }
    else if (auto2624A6C6_val == "5") {
        PlayerSetColorIndex(1, 5, true);
    }
    else if (auto2624A6C6_val == "4") {
        PlayerSetColorIndex(1, 4, true);
    }
    else if (auto2624A6C6_val == "3") {
        PlayerSetColorIndex(1, 3, true);
    }
    else if (auto2624A6C6_val == "2") {
        PlayerSetColorIndex(1, 2, true);
    }
    else if (auto2624A6C6_val == "1") {
        PlayerSetColorIndex(1, 1, true);
    }
    else if (auto2624A6C6_val == "0") {
        PlayerSetColorIndex(1, 0, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_APArchipelagoColorUpdate_Init () {
    lib2_gt_APArchipelagoColorUpdate = TriggerCreate("lib2_gt_APArchipelagoColorUpdate_Func");
    TriggerAddEventChatMessage(lib2_gt_APArchipelagoColorUpdate, c_playerAny, "SetColor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Rainbow Cycle
//--------------------------------------------------------------------------------------------------
bool lib2_gt_APRainbowCycle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(1, 1, true);
    Wait(lib2_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 6, true);
    Wait(lib2_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 5, true);
    Wait(lib2_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 7, true);
    Wait(lib2_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 3, true);
    Wait(lib2_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 2, true);
    Wait(lib2_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 4, true);
    Wait(lib2_gv_rainbowCyclePeriod, c_timeReal);
    TriggerExecute(lib2_gt_APRainbowCycle, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_APRainbowCycle_Init () {
    lib2_gt_APRainbowCycle = TriggerCreate("lib2_gt_APRainbowCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Dont Hide Archipelago
//--------------------------------------------------------------------------------------------------
bool lib2_gt_APDontHideArchipelago_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitIsHidden(lib2_gv_aPArchipelagoCommunicate) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(lib2_gv_aPArchipelagoCommunicate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_APDontHideArchipelago_Init () {
    lib2_gt_APDontHideArchipelago = TriggerCreate("lib2_gt_APDontHideArchipelago_Func");
    TriggerAddEventTimePeriodic(lib2_gt_APDontHideArchipelago, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Set Init Finished
//--------------------------------------------------------------------------------------------------
bool lib2_gt_APSetInitFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gv_aPInitFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_APSetInitFinished_Init () {
    lib2_gt_APSetInitFinished = TriggerCreate("lib2_gt_APSetInitFinished_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Pre Init Map
//--------------------------------------------------------------------------------------------------
bool lib2_gt_APPreInitMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUnitCount(1, "Archipelago", c_techCountQueuedOrBetter) < 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString("Archipelago"), c_unitCreateIgnorePlacement, 1, Point(42.0, 100.0));
    }

    lib2_gv_aPArchipelagoCommunicate = UnitGroupUnit(UnitGroup("Archipelago", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_APPreInitMap_Init () {
    lib2_gt_APPreInitMap = TriggerCreate("lib2_gt_APPreInitMap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data Mismatch
//--------------------------------------------------------------------------------------------------
bool lib2_gt_DataMismatch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lib2_gv_aPArchipelagoCommunicate) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString("Archipelago"), c_unitCreateIgnorePlacement, 1, Point(40.0, 100.0));
        lib2_gv_aPArchipelagoCommunicate = UnitLastCreated();
    }
    else {
        if (((UnitGetPropertyInt(lib2_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropNormal) - UnitGetPropertyInt(lib2_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropCurrent)) != lib2_gv_aPArchDataValue)) {
            UnitSetPropertyFixed(lib2_gv_aPArchipelagoCommunicate, c_unitPropLife, (UnitGetPropertyInt(lib2_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropNormal) - lib2_gv_aPArchDataValue));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_DataMismatch_Init () {
    lib2_gt_DataMismatch = TriggerCreate("lib2_gt_DataMismatch_Func");
    TriggerAddEventTimePeriodic(lib2_gt_DataMismatch, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Clear Chat
//--------------------------------------------------------------------------------------------------
bool lib2_gt_APClearChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaChat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_APClearChat_Init () {
    lib2_gt_APClearChat = TriggerCreate("lib2_gt_APClearChat_Func");
    TriggerAddEventChatMessage(lib2_gt_APClearChat, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Health Check
//--------------------------------------------------------------------------------------------------
bool lib2_gt_HealthCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGetPropertyInt(lib2_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropCurrent)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, UnitTypeGetName(UnitTypeFromString("Archipelago")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_HealthCheck_Init () {
    lib2_gt_HealthCheck = TriggerCreate("lib2_gt_HealthCheck_Func");
    TriggerAddEventChatMessage(lib2_gt_HealthCheck, c_playerAny, "health", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool lib2_gt_SoAInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_ShowSpearofAdunUI(true, c_transitionDurationDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_SoAInit_Init () {
    lib2_gt_SoAInit = TriggerCreate("lib2_gt_SoAInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnCarrier
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnCarrier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "CarrierTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "CarrierPurifier", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierAiur", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnCarrier_Init () {
    lib2_gt_TurnOnCarrier = TriggerCreate("lib2_gt_TurnOnCarrier_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnCarrier, null, AbilityCommand("SetCarrier", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnTempest
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnTempest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "CarrierTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "CarrierAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierPurifier", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnTempest_Init () {
    lib2_gt_TurnOnTempest = TriggerCreate("lib2_gt_TurnOnTempest_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnTempest, null, AbilityCommand("SetTempest", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnMothership
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "CarrierPurifier", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "CarrierAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierTaldarim", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnMothership_Init () {
    lib2_gt_TurnOnMothership = TriggerCreate("lib2_gt_TurnOnMothership_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnMothership, null, AbilityCommand("SetMothership", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnVoidRay
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnVoidRay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "VoidRayAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "VoidRayTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "VoidRayShakuras", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnVoidRay_Init () {
    lib2_gt_TurnOnVoidRay = TriggerCreate("lib2_gt_TurnOnVoidRay_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnVoidRay, null, AbilityCommand("SetVoidRay", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnDestroyer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnDestroyer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "VoidRayAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "VoidRayShakuras", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "VoidRayTaldarim", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnDestroyer_Init () {
    lib2_gt_TurnOnDestroyer = TriggerCreate("lib2_gt_TurnOnDestroyer_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnDestroyer, null, AbilityCommand("SetDestroyer", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnArbiter
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnArbiter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "VoidRayTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "VoidRayShakuras", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "VoidRayAiur", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnArbiter_Init () {
    lib2_gt_TurnOnArbiter = TriggerCreate("lib2_gt_TurnOnArbiter_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnArbiter, null, AbilityCommand("SetArbiter", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnPhoenix
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnPhoenix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "PhoenixShakuras", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "PhoenixPurifier", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "PhoenixAiur", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnPhoenix_Init () {
    lib2_gt_TurnOnPhoenix = TriggerCreate("lib2_gt_TurnOnPhoenix_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnPhoenix, null, AbilityCommand("SetPhoenix", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnCorsair
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnCorsair_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "PhoenixPurifier", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "PhoenixAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "PhoenixShakuras", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnCorsair_Init () {
    lib2_gt_TurnOnCorsair = TriggerCreate("lib2_gt_TurnOnCorsair_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnCorsair, null, AbilityCommand("SetCorsair", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnMirage
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnMirage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "PhoenixShakuras", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "PhoenixAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "PhoenixPurifier", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnMirage_Init () {
    lib2_gt_TurnOnMirage = TriggerCreate("lib2_gt_TurnOnMirage_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnMirage, null, AbilityCommand("SetMirage", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnImmortal
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnImmortal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalShakuras", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalAiur", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnImmortal_Init () {
    lib2_gt_TurnOnImmortal = TriggerCreate("lib2_gt_TurnOnImmortal_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnImmortal, null, AbilityCommand("SetImmortal", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnAnnihilator
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnAnnihilator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalShakuras", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnAnnihilator_Init () {
    lib2_gt_TurnOnAnnihilator = TriggerCreate("lib2_gt_TurnOnAnnihilator_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnAnnihilator, null, AbilityCommand("SetAnnihilator", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnVanguard
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnVanguard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalShakuras", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "ImmortalAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalTaldarim", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnVanguard_Init () {
    lib2_gt_TurnOnVanguard = TriggerCreate("lib2_gt_TurnOnVanguard_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnVanguard, null, AbilityCommand("SetVanguard", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnCollosus
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnCollosus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusPurifier", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnCollosus_Init () {
    lib2_gt_TurnOnCollosus = TriggerCreate("lib2_gt_TurnOnCollosus_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnCollosus, null, AbilityCommand("SetColossus", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnReaver
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnReaver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusTaldarim", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusPurifier", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusAiur", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnReaver_Init () {
    lib2_gt_TurnOnReaver = TriggerCreate("lib2_gt_TurnOnReaver_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnReaver, null, AbilityCommand("SetReaver", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnWrathwalker
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnWrathwalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusAiur", 1);
    libVoiC_gf_EnableCampaignTechUnit(false, "ColossusPurifier", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusTaldarim", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnWrathwalker_Init () {
    lib2_gt_TurnOnWrathwalker = TriggerCreate("lib2_gt_TurnOnWrathwalker_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnWrathwalker, null, AbilityCommand("SetWrathwalker", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnDarkTemplar
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnDarkTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnDarkTemplar_Init () {
    lib2_gt_TurnOnDarkTemplar = TriggerCreate("lib2_gt_TurnOnDarkTemplar_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnDarkTemplar, null, AbilityCommand("SetDarkTemplar", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnAvenger
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnAvenger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnAvenger_Init () {
    lib2_gt_TurnOnAvenger = TriggerCreate("lib2_gt_TurnOnAvenger_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnAvenger, null, AbilityCommand("SetAvenger", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnBloodHunter
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnBloodHunter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnBloodHunter_Init () {
    lib2_gt_TurnOnBloodHunter = TriggerCreate("lib2_gt_TurnOnBloodHunter_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnBloodHunter, null, AbilityCommand("SetBloodHunter", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnHighTemplar
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnHighTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnHighTemplar_Init () {
    lib2_gt_TurnOnHighTemplar = TriggerCreate("lib2_gt_TurnOnHighTemplar_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnHighTemplar, null, AbilityCommand("SetHighTemplar", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnDarkArchon
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnDarkArchon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnDarkArchon_Init () {
    lib2_gt_TurnOnDarkArchon = TriggerCreate("lib2_gt_TurnOnDarkArchon_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnDarkArchon, null, AbilityCommand("SetDarkArchon", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnAscendant
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnAscendant_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnAscendant_Init () {
    lib2_gt_TurnOnAscendant = TriggerCreate("lib2_gt_TurnOnAscendant_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnAscendant, null, AbilityCommand("SetAscendant", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnSentry
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnSentry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnSentry_Init () {
    lib2_gt_TurnOnSentry = TriggerCreate("lib2_gt_TurnOnSentry_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnSentry, null, AbilityCommand("SetSentry", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnEnergizer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnEnergizer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnEnergizer_Init () {
    lib2_gt_TurnOnEnergizer = TriggerCreate("lib2_gt_TurnOnEnergizer_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnEnergizer, null, AbilityCommand("SetEnergizer", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnHavoc
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnHavoc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnHavoc_Init () {
    lib2_gt_TurnOnHavoc = TriggerCreate("lib2_gt_TurnOnHavoc_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnHavoc, null, AbilityCommand("SetHavoc", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnStalker
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnStalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnStalker_Init () {
    lib2_gt_TurnOnStalker = TriggerCreate("lib2_gt_TurnOnStalker_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnStalker, null, AbilityCommand("SetStalker", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnDragoon
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnDragoon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnDragoon_Init () {
    lib2_gt_TurnOnDragoon = TriggerCreate("lib2_gt_TurnOnDragoon_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnDragoon, null, AbilityCommand("SetDragoon", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnAdept
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnAdept_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnAdept_Init () {
    lib2_gt_TurnOnAdept = TriggerCreate("lib2_gt_TurnOnAdept_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnAdept, null, AbilityCommand("SetAdept", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnAiurZealot
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnAiurZealot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_GenericUnitSetting("ZealotAiur", "ZealotShakuras", "ZealotPurifier");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnAiurZealot_Init () {
    lib2_gt_TurnOnAiurZealot = TriggerCreate("lib2_gt_TurnOnAiurZealot_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnAiurZealot, null, AbilityCommand("SetAiurZealot", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnCenturion
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnCenturion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_GenericUnitSetting("ZealotShakuras", "ZealotAiur", "ZealotPurifier");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnCenturion_Init () {
    lib2_gt_TurnOnCenturion = TriggerCreate("lib2_gt_TurnOnCenturion_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnCenturion, null, AbilityCommand("SetCenturion", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnSentinel
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TurnOnSentinel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_GenericUnitSetting("ZealotPurifier", "ZealotShakuras", "ZealotAiur");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_TurnOnSentinel_Init () {
    lib2_gt_TurnOnSentinel = TriggerCreate("lib2_gt_TurnOnSentinel_Func");
    TriggerAddEventUnitAbility(lib2_gt_TurnOnSentinel, null, AbilityCommand("SetSentinel", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitTech
//--------------------------------------------------------------------------------------------------
bool lib2_gt_InitTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_InitTech_Init () {
    lib2_gt_InitTech = TriggerCreate("lib2_gt_InitTech_Func");
    TriggerAddEventMapInit(lib2_gt_InitTech);
}

void lib2_InitTriggers () {
    lib2_gt_Initialization_Init();
    lib2_gt_ArchipelagoInitialization_Init();
    lib2_gt_APArchipelagoTechUpdate_Init();
    lib2_gt_APArchipelagoColorUpdate_Init();
    lib2_gt_APRainbowCycle_Init();
    lib2_gt_APDontHideArchipelago_Init();
    lib2_gt_APSetInitFinished_Init();
    lib2_gt_APPreInitMap_Init();
    lib2_gt_DataMismatch_Init();
    lib2_gt_APClearChat_Init();
    lib2_gt_HealthCheck_Init();
    lib2_gt_SoAInit_Init();
    lib2_gt_TurnOnCarrier_Init();
    lib2_gt_TurnOnTempest_Init();
    lib2_gt_TurnOnMothership_Init();
    lib2_gt_TurnOnVoidRay_Init();
    lib2_gt_TurnOnDestroyer_Init();
    lib2_gt_TurnOnArbiter_Init();
    lib2_gt_TurnOnPhoenix_Init();
    lib2_gt_TurnOnCorsair_Init();
    lib2_gt_TurnOnMirage_Init();
    lib2_gt_TurnOnImmortal_Init();
    lib2_gt_TurnOnAnnihilator_Init();
    lib2_gt_TurnOnVanguard_Init();
    lib2_gt_TurnOnCollosus_Init();
    lib2_gt_TurnOnReaver_Init();
    lib2_gt_TurnOnWrathwalker_Init();
    lib2_gt_TurnOnDarkTemplar_Init();
    lib2_gt_TurnOnAvenger_Init();
    lib2_gt_TurnOnBloodHunter_Init();
    lib2_gt_TurnOnHighTemplar_Init();
    lib2_gt_TurnOnDarkArchon_Init();
    lib2_gt_TurnOnAscendant_Init();
    lib2_gt_TurnOnSentry_Init();
    lib2_gt_TurnOnEnergizer_Init();
    lib2_gt_TurnOnHavoc_Init();
    lib2_gt_TurnOnStalker_Init();
    lib2_gt_TurnOnDragoon_Init();
    lib2_gt_TurnOnAdept_Init();
    lib2_gt_TurnOnAiurZealot_Init();
    lib2_gt_TurnOnCenturion_Init();
    lib2_gt_TurnOnSentinel_Init();
    lib2_gt_InitTech_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_InitLib_completed = false;

void lib2_InitLib () {
    if (lib2_InitLib_completed) {
        return;
    }

    lib2_InitLib_completed = true;

    lib2_InitLibraries();
    lib2_InitVariables();
    lib2_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
    lib1_InitLib();
    lib2_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION4 = 5;
const int gv_pLAYER_02_DOMINION5 = 6;
const int gv_pLAYER_02_DOMINION7 = 7;
const int gv_pLAYER_02_DOMINION8 = 8;
const int gv_pLAYER_02_DOMINION6 = 9;
const int gv_pLAYER_02_DOMINION9 = 10;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_EnemyCamp {
    unitgroup lv_unitGroup;
    int lv_maxUnitCount;
    int lv_currentUnitCount;
    unitgroup lv_targetDummies;
    region lv_aggroRegion;
    bool lv_currentlyAggroed;
    bool lv_campAlive;
};

struct gs_RECORD_BonusObjective {
    unit lv_facility;
    int lv_ping;
    unitgroup lv_guards;
    bool lv_rescued;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_BonusObjectiveLocations_None = 0;
const int ge_PRESET_BonusObjectiveLocations_Middle = 1;
const int ge_PRESET_BonusObjectiveLocations_North = 2;
const int ge_PRESET_BonusObjectiveLocations_South = 3;
const int ge_PRESET_WaveOrigin_Raynor = 0;
const int ge_PRESET_WaveOrigin_Valerian = 1;
const int ge_PRESET_WaveOrigin_AlphaNorth = 2;
const int ge_PRESET_WaveOrigin_AlphaSouth = 3;
const int ge_PRESET_WaveOrigin_FreezeNorth = 4;
const int ge_PRESET_WaveOrigin_FreezeSouth = 5;
const int ge_PRESET_WaveOrigin_FreezeCenterNorth = 6;
const int ge_PRESET_WaveOrigin_FreezeCenterSouth = 7;
const int ge_PRESET_AttackWaveDirection_North = 0;
const int ge_PRESET_AttackWaveDirection_South = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_dominionGroup;
unit gv_raynorCC;
unit gv_valerianCC;
string gv_mapMusicTrack;
playergroup gv_enemyPlayers;
unit gv_ulnarKeystone;
int gv_keystonePing;
fixed gv_disruptionInactiveDuration;
fixed gv_disruptionActiveDuration;
bool gv_disruptionActive;
timer gv_disruptionTimer;
int gv_disruptionTimerWindow;
int gv_disruptionCount;
string gv_normalLight;
string gv_disruptionLight;
string gv_normalAmbience;
string gv_disruptionAmbience;
sound gv_disruptionSound;
bool gv_timerWindowVisible;
int gv_disruptionOffTransmissionCounter;
gs_RECORD_EnemyCamp[6] gv_enemyCamps;
int gv_enemyCampsCount;
gs_RECORD_BonusObjective[4] gv_bonusObjectiveRecord;
int gv_scienceFacilitiesSaved;
bool gv_raynorWaveBoost;
int gv_raynorProgressCount;
int gv_raynorDayWaveAlternator;
playergroup gv_shadowCorpsNorthPlayers;
bool gv_valerianWaveBoost;
int gv_valerianProgressCount;
int gv_valerianDayWaveAlternator;
playergroup gv_shadowCorpsSouthPlayers;
unitgroup gv_hybridWaveGroup;
int gv_hybridTauntCounter;
int gv_hybridDeadLineCounter;
int gv_achievementDisruptedEnemyKills;
int gv_masteryDisruptedStructureKills;
bool gv_disruptionAchievementFlagged;
bool gv_masteryAchievementFlagged;
int gv_achievementAllyStructuresDestroyed;
bool gv_achievementImmortalBuilt;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDestroyZergBase3;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
actor gv_introPowerUp;
unit gv_introHybridAttacker;
unitgroup gv_introHybridGroup;
bool gv_introRunning;
unitgroup gv_introRaynorsGroup;

void InitGlobals () {
    int init_i;

    gv_dominionGroup = PlayerGroupEmpty();
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_keystonePing = c_invalidPingId;
    gv_disruptionTimer = TimerCreate();
    gv_disruptionTimerWindow = c_timerWindowNone;
    gv_normalAmbience = "Ambience_QdBG_PKorhal02_Lp";
    gv_disruptionAmbience = "Ambience_Liberty";
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_enemyCamps[init_i].lv_unitGroup = UnitGroupEmpty();
        gv_enemyCamps[init_i].lv_targetDummies = UnitGroupEmpty();
        gv_enemyCamps[init_i].lv_campAlive = true;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_bonusObjectiveRecord[init_i].lv_ping = c_invalidPingId;
        gv_bonusObjectiveRecord[init_i].lv_guards = UnitGroupEmpty();
    }
    gv_shadowCorpsNorthPlayers = PlayerGroupEmpty();
    gv_shadowCorpsSouthPlayers = PlayerGroupEmpty();
    gv_hybridWaveGroup = UnitGroupEmpty();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introHybridGroup = UnitGroupEmpty();
    gv_introRaynorsGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_UnitisHybrid (unit lp_unit);
unit gf_ToughestUnitinUnitGroup (unitgroup lp_targetGroup);
point gf_EnemyCampUnitsHomePosition (unit lp_campUnit);
void gf_CoreRecoveryVisual (point lp_cHOSEN_POINT);
void gf_HybridWavePing (unitgroup lp_unitGroup);
void gf_HybridDominatorAI (unit lp_hybrid);
void gf_SetWaveWaypoints (int lp_origin);
void gf_CreateAttackWaveUnits (int lp_unitCount, string lp_unitType, int lp_direction);
void gf_WarpInHybridCinematic (point lp_point, string lp_hybridUnitType, int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DudesCarDestroyedAgainQ;
trigger gt_StartGameQ;
trigger gt_ImmortalQ;
trigger gt_RaynorIntroQ;
trigger gt_ValerianIntroQ;
trigger gt_HybridBreakStuff;
trigger gt_DisruptionCycle;
trigger gt_DisruptionSoonQ;
trigger gt_DisruptionBehaviorUpdate;
trigger gt_DisruptionCycleOffQ;
trigger gt_DisruptionStunHintQ;
trigger gt_EnemyCampInit;
trigger gt_EnemyCampController;
trigger gt_UpdateBonusObjective;
trigger gt_BonusObjectiveWait;
trigger gt_BonusObjectiveIntroQ;
trigger gt_BonusObjectiveIntroTripwire;
trigger gt_BonusIntroTransmissionQ;
trigger gt_BonusUpdateMiddleQ;
trigger gt_BonusUpdateNorthQ;
trigger gt_BonusUpdateSouthQ;
trigger gt_BonusCompleteQ;
trigger gt_MedicSupportCenter;
trigger gt_SciVesselSupportNorth;
trigger gt_MedivacSupportSouth;
trigger gt_RaynorDayWaves;
trigger gt_ActivateBulliesRaynorForward1;
trigger gt_ActivateBulliesRaynorForward2;
trigger gt_RaynorForward1Q;
trigger gt_RaynorForward2Q;
trigger gt_RaynorWaveBoost;
trigger gt_ValerianDayWaves;
trigger gt_ValerianDayWavesQ;
trigger gt_ActivateBulliesValerianForward1;
trigger gt_ActivateBulliesValerianForward2;
trigger gt_ValerianForward1Q;
trigger gt_ValerianForward2Q;
trigger gt_ValerianWaveBoost;
trigger gt_MoebiusCorpsPlayerWaveController;
trigger gt_MoebiusCorpsAttacksArtanisQ;
trigger gt_MoebiusCorpsNorthWaves;
trigger gt_MoebiusCorpsSouthWaves;
trigger gt_DeactivateBulliesMoebiusCorpsNorthForward1;
trigger gt_DeactivateBulliesMoebiusCorpsNorthForward2;
trigger gt_DeactivateBulliesMoebiusCorpsSouthForward1;
trigger gt_DeactivateBulliesMoebiusCorpsSouthForward2;
trigger gt_HybridWaveController;
trigger gt_HybridAttacksQ;
trigger gt_HybridWaveDeadQ;
trigger gt_UpdateBullyStatus;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_SetAIUpgradeLevel;
trigger gt_DefeatBaseDead;
trigger gt_DefeatAllyDead;
trigger gt_VictoryRecovertheKeystoneCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementMentalBreakdownandMastery;
trigger gt_AchievementAllyStructureDestroyed;
trigger gt__10thAnniversaryAchievementVictorywithoutconstructingImmortals;
trigger gt_ObjectiveRecovertheKeystoneCreate;
trigger gt_ObjectiveRecovertheKeystoneComplete;
trigger gt_ObjectiveRaynorsCommandCenterMustSurviveCreate;
trigger gt_ObjectiveRaynorsCommandCenterMustSurviveComplete;
trigger gt_ObjectiveRaynorsCommandCenterMustSurviveFailed;
trigger gt_ObjectiveValeriansCommandCenterMustSurviveCreate;
trigger gt_ObjectiveValeriansCommandCenterMustSurviveComplete;
trigger gt_ObjectiveValeriansCommandCenterMustSurviveFailed;
trigger gt_ObjectiveSecureResearchFacilitiesCreate;
trigger gt_ObjectiveSecureResearchFacilitiesComplete;
trigger gt_ObjectiveSecureResearchFacilitiesUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroProtossReinforcements;
trigger gt_IntroHybridEntrance;
trigger gt_IntroOrderRaynorsMarines;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_UnitisHybrid (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridDominatorVoid"))) {
        return true;
    }
    else {
        return false;
    }
}

unit gf_ToughestUnitinUnitGroup (unitgroup lp_targetGroup) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto253CB087_g;
    int auto253CB087_u;

    // Variable Initialization

    // Implementation
    auto253CB087_g = lp_targetGroup;
    auto253CB087_u = UnitGroupCount(auto253CB087_g, c_unitCountAll);
    for (;; auto253CB087_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto253CB087_g, auto253CB087_u);
        if (lv_indexUnit == null) { break; }
        if (((lv_targetUnit == null) || (UnitGetPropertyFixed(lv_indexUnit, c_unitPropVitality, c_unitPropCurrent) > UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent)))) {
            lv_targetUnit = lv_indexUnit;
        }

    }
    return lv_targetUnit;
}

point gf_EnemyCampUnitsHomePosition (unit lp_campUnit) {
    // Automatic Variable Declarations
    // Implementation
    return Point(UnitGetCustomValue(lp_campUnit, 1), UnitGetCustomValue(lp_campUnit, 2));
}

trigger auto_gf_CoreRecoveryVisual_Trigger = null;
point auto_gf_CoreRecoveryVisual_lp_cHOSEN_POINT;

void gf_CoreRecoveryVisual (point lp_cHOSEN_POINT) {
    auto_gf_CoreRecoveryVisual_lp_cHOSEN_POINT = lp_cHOSEN_POINT;

    if (auto_gf_CoreRecoveryVisual_Trigger == null) {
        auto_gf_CoreRecoveryVisual_Trigger = TriggerCreate("auto_gf_CoreRecoveryVisual_TriggerFunc");
    }

    TriggerExecute(auto_gf_CoreRecoveryVisual_Trigger, false, false);
}

bool auto_gf_CoreRecoveryVisual_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_CoreRecoveryVisual_lp_cHOSEN_POINT;

    // Variable Declarations
    unit lv_core;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, lp_cHOSEN_POINT);
    lv_core = UnitLastCreated();
    UnitSetState(lv_core, c_unitStateHighlightable, false);
    UnitSetState(lv_core, c_unitStateSelectable, false);
    UnitSetState(lv_core, c_unitStateTargetable, false);
    UnitSetState(lv_core, c_unitStateInvulnerable, true);
    UnitBehaviorAddPlayer(lv_core, "ObjectiveCollectionBeam", gv_pLAYER_01_USER, 1);
    Wait(2.0, c_timeGame);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(lp_cHOSEN_POINT, "PKorhal02Bonus01");
    if ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    return true;
}

trigger auto_gf_HybridWavePing_Trigger = null;
unitgroup auto_gf_HybridWavePing_lp_unitGroup;

void gf_HybridWavePing (unitgroup lp_unitGroup) {
    auto_gf_HybridWavePing_lp_unitGroup = lp_unitGroup;

    if (auto_gf_HybridWavePing_Trigger == null) {
        auto_gf_HybridWavePing_Trigger = TriggerCreate("auto_gf_HybridWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridWavePing_Trigger, false, false);
}

bool auto_gf_HybridWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_HybridWavePing_lp_unitGroup;

    // Variable Declarations
    int lv_hybridPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hybridPing = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lp_unitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_hybridPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3C188D14"));
    PingSetScale(PingLastCreated(), 0.9);
    while ((libNtve_gf_UnitGroupIsDead(lp_unitGroup) == false) && (libVCMI_gf_GameIsOver() == false)) {
        PingSetPosition(lv_hybridPing, UnitGroupCenterOfGroup(lp_unitGroup));
        Wait(0.25, c_timeGame);
    }
    PingDestroy(lv_hybridPing);
    return true;
}

trigger auto_gf_HybridDominatorAI_Trigger = null;
unit auto_gf_HybridDominatorAI_lp_hybrid;

void gf_HybridDominatorAI (unit lp_hybrid) {
    auto_gf_HybridDominatorAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridDominatorAI_Trigger == null) {
        auto_gf_HybridDominatorAI_Trigger = TriggerCreate("auto_gf_HybridDominatorAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridDominatorAI_Trigger, false, false);
}

bool auto_gf_HybridDominatorAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridDominatorAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyGroup9;
    unit lv_lastAttacker;
    int lv_targetCount;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto3AA63390_g;
    int auto3AA63390_u;
    unit auto3AA63390_var;

    // Variable Initialization
    lv_enemyGroup9 = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_hybrid) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_lastAttacker = AILastAttacker(lp_hybrid);
        lv_enemyGroup9 = UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hybrid), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), c_cmdStateCooldown) == false)) {
            if ((UnitGroupCount(lv_enemyGroup9, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), gf_ToughestUnitinUnitGroup(lv_enemyGroup9)));
            }
            else {
                if ((UnitIsAlive(lv_lastAttacker) == true) && (UnitGetType(lv_lastAttacker) == "PhotonCannon") && (DistanceBetweenPoints(UnitGetPosition(lp_hybrid), UnitGetPosition(lv_lastAttacker)) <= 9.0)) {
                    libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), lv_lastAttacker));
                }

            }
        }

        lv_targetCount = UnitGroupCount(lv_enemyGroup9, c_unitCountAlive);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridDominatorVoidPsiStorm", 0), c_cmdStateCooldown) == false) && (lv_targetCount >= 3)) {
            auto3AA63390_g = lv_enemyGroup9;
            auto3AA63390_u = UnitGroupCount(auto3AA63390_g, c_unitCountAll);
            for (;; auto3AA63390_u -= 1) {
                auto3AA63390_var = UnitGroupUnitFromEnd(auto3AA63390_g, auto3AA63390_u);
                if (auto3AA63390_var == null) { break; }
                lv_targetPoint = UnitGetPosition(auto3AA63390_var);
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(lv_targetPoint, 2.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 3)) {
                    libNtve_gf_AICast(lp_hybrid, OrderTargetingPoint(AbilityCommand("HybridDominatorVoidPsiStorm", 0), lv_targetPoint));
                    break;
                }
                else {
                    lv_targetPoint = null;
                }
            }
        }

        lv_enemyGroup9 = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

void gf_SetWaveWaypoints (int lp_origin) {
    // Variable Declarations
    int lv_waypointIndex;

    // Automatic Variable Declarations
    int auto8F04B60D_val;
    const int autoFD73788A_ae = 7;
    const int autoFD73788A_ai = 1;
    const int auto8CB7ACD7_ae = 7;
    const int auto8CB7ACD7_ai = 1;
    const int auto2B3F649D_ae = 1;
    const int auto2B3F649D_ai = -1;
    const int autoA37A4C8F_ae = 1;
    const int autoA37A4C8F_ai = -1;
    const int auto6F1784BA_ae = 1;
    const int auto6F1784BA_ai = -1;
    const int auto8001317F_ae = 1;
    const int auto8001317F_ai = -1;

    // Variable Initialization

    // Implementation
    auto8F04B60D_val = lp_origin;
    if (auto8F04B60D_val == ge_PRESET_WaveOrigin_Raynor) {
        lv_waypointIndex = 1;
        for ( ; ( (autoFD73788A_ai >= 0 && lv_waypointIndex <= autoFD73788A_ae) || (autoFD73788A_ai < 0 && lv_waypointIndex >= autoFD73788A_ae) ) ; lv_waypointIndex += autoFD73788A_ai ) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromName(("Raynor Waypoint " + IntToString(lv_waypointIndex))), false);
        }
    }
    else if (auto8F04B60D_val == ge_PRESET_WaveOrigin_Valerian) {
        lv_waypointIndex = 1;
        for ( ; ( (auto8CB7ACD7_ai >= 0 && lv_waypointIndex <= auto8CB7ACD7_ae) || (auto8CB7ACD7_ai < 0 && lv_waypointIndex >= auto8CB7ACD7_ae) ) ; lv_waypointIndex += auto8CB7ACD7_ai ) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION2, PointFromName(("Valerian Waypoint " + IntToString(lv_waypointIndex))), false);
        }
    }
    else if (auto8F04B60D_val == ge_PRESET_WaveOrigin_AlphaNorth) {
        lv_waypointIndex = 5;
        for ( ; ( (auto2B3F649D_ai >= 0 && lv_waypointIndex <= auto2B3F649D_ae) || (auto2B3F649D_ai < 0 && lv_waypointIndex >= auto2B3F649D_ae) ) ; lv_waypointIndex += auto2B3F649D_ai ) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION4, PointFromName(("Raynor Waypoint " + IntToString(lv_waypointIndex))), false);
        }
    }
    else if (auto8F04B60D_val == ge_PRESET_WaveOrigin_AlphaSouth) {
        lv_waypointIndex = 5;
        for ( ; ( (autoA37A4C8F_ai >= 0 && lv_waypointIndex <= autoA37A4C8F_ae) || (autoA37A4C8F_ai < 0 && lv_waypointIndex >= autoA37A4C8F_ae) ) ; lv_waypointIndex += autoA37A4C8F_ai ) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromName(("Valerian Waypoint " + IntToString(lv_waypointIndex))), false);
        }
    }
    else if (auto8F04B60D_val == ge_PRESET_WaveOrigin_FreezeNorth) {
        lv_waypointIndex = 5;
        for ( ; ( (auto6F1784BA_ai >= 0 && lv_waypointIndex <= auto6F1784BA_ae) || (auto6F1784BA_ai < 0 && lv_waypointIndex >= auto6F1784BA_ae) ) ; lv_waypointIndex += auto6F1784BA_ai ) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromName(("Raynor Waypoint " + IntToString(lv_waypointIndex))), false);
        }
    }
    else if (auto8F04B60D_val == ge_PRESET_WaveOrigin_FreezeSouth) {
        lv_waypointIndex = 5;
        for ( ; ( (auto8001317F_ai >= 0 && lv_waypointIndex <= auto8001317F_ae) || (auto8001317F_ai < 0 && lv_waypointIndex >= auto8001317F_ae) ) ; lv_waypointIndex += auto8001317F_ai ) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromName(("Valerian Waypoint " + IntToString(lv_waypointIndex))), false);
        }
    }
    else if (auto8F04B60D_val == ge_PRESET_WaveOrigin_FreezeCenterNorth) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(741), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(740), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(739), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(900), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(119), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(932), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(966), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(967), false);
    }
    else if (auto8F04B60D_val == ge_PRESET_WaveOrigin_FreezeCenterSouth) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(895), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(894), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(893), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(968), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(969), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(932), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(966), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(967), false);
    }
    else {
    }
}

void gf_CreateAttackWaveUnits (int lp_unitCount, string lp_unitType, int lp_direction) {
    // Automatic Variable Declarations
    int auto9D241A97_val;
    unitgroup auto8556BA01_g;
    int auto8556BA01_u;
    unit auto8556BA01_var;

    // Implementation
    auto9D241A97_val = lp_direction;
    if (auto9D241A97_val == ge_PRESET_AttackWaveDirection_North) {
        UnitCreate(lp_unitCount, lp_unitType, 0, gv_pLAYER_02_DOMINION3, PointFromId(462), 270.0);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1073)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1075)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(709)), c_orderQueueAddToEnd);
    }
    else if (auto9D241A97_val == ge_PRESET_AttackWaveDirection_South) {
        UnitCreate(lp_unitCount, lp_unitType, 0, gv_pLAYER_02_DOMINION3, PointFromId(465), 270.0);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(718)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(720)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(707)), c_orderQueueAddToEnd);
    }
    else {
    }
    auto8556BA01_g = UnitLastCreatedGroup();
    auto8556BA01_u = UnitGroupCount(auto8556BA01_g, c_unitCountAll);
    for (;; auto8556BA01_u -= 1) {
        auto8556BA01_var = UnitGroupUnitFromEnd(auto8556BA01_g, auto8556BA01_u);
        if (auto8556BA01_var == null) { break; }
        if ((gf_UnitisHybrid(auto8556BA01_var) == true)) {
            UnitBehaviorAddPlayer(auto8556BA01_var, "DisableMedicHealing", gv_pLAYER_02_DOMINION3, 1);
        }

    }
}

trigger auto_gf_WarpInHybridCinematic_Trigger = null;
point auto_gf_WarpInHybridCinematic_lp_point;
string auto_gf_WarpInHybridCinematic_lp_hybridUnitType;
int auto_gf_WarpInHybridCinematic_lp_player;

void gf_WarpInHybridCinematic (point lp_point, string lp_hybridUnitType, int lp_player) {
    auto_gf_WarpInHybridCinematic_lp_point = lp_point;
    auto_gf_WarpInHybridCinematic_lp_hybridUnitType = lp_hybridUnitType;
    auto_gf_WarpInHybridCinematic_lp_player = lp_player;

    if (auto_gf_WarpInHybridCinematic_Trigger == null) {
        auto_gf_WarpInHybridCinematic_Trigger = TriggerCreate("auto_gf_WarpInHybridCinematic_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInHybridCinematic_Trigger, false, false);
}

bool auto_gf_WarpInHybridCinematic_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_WarpInHybridCinematic_lp_point;
    string lp_hybridUnitType = auto_gf_WarpInHybridCinematic_lp_hybridUnitType;
    int lp_player = auto_gf_WarpInHybridCinematic_lp_player;

    // Variable Declarations
    unit lv_hybrid;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_hybridUnitType, 0, lp_player, lp_point, UnitGetPosition(gv_ulnarKeystone));
    lv_hybrid = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, lv_hybrid);
    libNtve_gf_PauseUnit(lv_hybrid, true);
    libNtve_gf_SendActorMessageToUnit(lv_hybrid, "Signal Birth");
    SoundPlayAtPointForPlayer(SoundLink("Hybrid_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_hybrid), 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    if ((gv_introRunning == false)) {
        return true;
    }

    libNtve_gf_PauseUnit(lv_hybrid, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_hybrid), c_animNameDefault, "Stand Angry", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init01Technology, true, false);
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "ScavengingSystems", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TechReactorAI", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "TechReactorAI", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION4, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION5, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION8, "SiegeTech", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "Immortal", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "DarkMarineArmor", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION4, "DarkMarineArmor", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION5, "DarkMarineArmor", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "DarkMarineArmor", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION8, "DarkMarineArmor", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto781CE6EB_g;
    int auto781CE6EB_var;
    playergroup autoB2241722_g;
    int autoB2241722_var;
    playergroup auto4D424410_g;
    int auto4D424410_var;
    playergroup autoD8426161_g;
    int autoD8426161_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_dominionGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_dominionGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_shadowCorpsNorthPlayers, gv_pLAYER_02_DOMINION4);
    PlayerGroupAdd(gv_shadowCorpsNorthPlayers, gv_pLAYER_02_DOMINION7);
    PlayerGroupAdd(gv_shadowCorpsSouthPlayers, gv_pLAYER_02_DOMINION5);
    PlayerGroupAdd(gv_shadowCorpsSouthPlayers, gv_pLAYER_02_DOMINION8);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_shadowCorpsNorthPlayers, gv_enemyPlayers);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_shadowCorpsSouthPlayers, gv_enemyPlayers);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION9, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetPlayerGroupAlliance(gv_dominionGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_Ally);
    PlayerSetAlliance(gv_pLAYER_02_DOMINION6, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    PlayerGroupAdd(gv_dominionGroup, gv_pLAYER_02_DOMINION6);
    auto781CE6EB_g = gv_dominionGroup;
    auto781CE6EB_var = -1;
    while (true) {
        auto781CE6EB_var = PlayerGroupNextPlayer(auto781CE6EB_g, auto781CE6EB_var);
        if (auto781CE6EB_var < 0) { break; }
        PlayerSetColorIndex(auto781CE6EB_var, 3, true);
        libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION6, auto781CE6EB_var, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION9, auto781CE6EB_var, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(auto781CE6EB_var, c_allianceIdPushable, gv_pLAYER_01_USER, true);
        PlayerModifyPropertyInt(auto781CE6EB_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto781CE6EB_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerSetState(auto781CE6EB_var, c_playerStateFoodIgnored, true);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    autoB2241722_g = gv_shadowCorpsNorthPlayers;
    autoB2241722_var = -1;
    while (true) {
        autoB2241722_var = PlayerGroupNextPlayer(autoB2241722_g, autoB2241722_var);
        if (autoB2241722_var < 0) { break; }
        PlayerSetAlliance(autoB2241722_var, c_allianceIdPushable, gv_pLAYER_02_DOMINION3, true);
    }
    auto4D424410_g = gv_shadowCorpsSouthPlayers;
    auto4D424410_var = -1;
    while (true) {
        auto4D424410_var = PlayerGroupNextPlayer(auto4D424410_g, auto4D424410_var);
        if (auto4D424410_var < 0) { break; }
        PlayerSetAlliance(auto4D424410_var, c_allianceIdPushable, gv_pLAYER_02_DOMINION3, true);
    }
    autoD8426161_g = gv_enemyPlayers;
    autoD8426161_var = -1;
    while (true) {
        autoD8426161_var = PlayerGroupNextPlayer(autoD8426161_g, autoD8426161_var);
        if (autoD8426161_var < 0) { break; }
        PlayerSetColorIndex(autoD8426161_var, 1, true);
        libNtve_gf_SetAlliance(gv_pLAYER_01_USER, autoD8426161_var, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION6, autoD8426161_var, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION9, autoD8426161_var, libNtve_ge_AllianceSetting_Neutral);
        PlayerModifyPropertyInt(autoD8426161_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(autoD8426161_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerSetState(autoD8426161_var, c_playerStateFoodIgnored, true);
    }
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2CEBB2E7_g;
    int auto2CEBB2E7_u;
    unit auto2CEBB2E7_var;
    unitgroup auto7C4923BD_g;
    int auto7C4923BD_u;
    unit auto7C4923BD_var;
    unitgroup auto17756181_g;
    int auto17756181_u;
    unit auto17756181_var;
    unitgroup autoB25B227E_g;
    int autoB25B227E_u;
    unit autoB25B227E_var;
    unitgroup auto0EF42248_g;
    int auto0EF42248_u;
    unit auto0EF42248_var;
    unitgroup auto2111EEBA_g;
    int auto2111EEBA_u;
    unit auto2111EEBA_var;
    unitgroup autoDA33160C_g;
    int autoDA33160C_u;
    unit autoDA33160C_var;
    unitgroup auto55C4B393_g;
    int auto55C4B393_u;
    unit auto55C4B393_var;
    unitgroup auto49D7021E_g;
    int auto49D7021E_u;
    unit auto49D7021E_var;
    unitgroup auto884B764C_g;
    int auto884B764C_u;
    unit auto884B764C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_raynorCC = UnitFromId(95);
    gv_valerianCC = UnitFromId(614);
    gv_ulnarKeystone = UnitFromId(2136);
    gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_guards = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_guards = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_guards = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2132), null, StringExternal("Param/Value/14F6109B"), null);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    UnitCargoCreate(UnitFromId(306), "Marine", libNtve_gf_DifficultyValueInt(4, 4, 4, 4));
    UnitGroupAddUnitGroup(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_guards, UnitCargoLastCreatedGroup());
    UnitCargoCreate(UnitFromId(410), "Marine", libNtve_gf_DifficultyValueInt(4, 4, 4, 4));
    UnitGroupAddUnitGroup(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_guards, UnitCargoLastCreatedGroup());
    auto2CEBB2E7_g = UnitGroup(null, c_playerAny, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2CEBB2E7_u = UnitGroupCount(auto2CEBB2E7_g, c_unitCountAll);
    for (;; auto2CEBB2E7_u -= 1) {
        auto2CEBB2E7_var = UnitGroupUnitFromEnd(auto2CEBB2E7_g, auto2CEBB2E7_u);
        if (auto2CEBB2E7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2CEBB2E7_var, false);
    }
    auto7C4923BD_g = UnitGroup("DumpTruck", gv_pLAYER_02_DOMINION9, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7C4923BD_u = UnitGroupCount(auto7C4923BD_g, c_unitCountAll);
    for (;; auto7C4923BD_u -= 1) {
        auto7C4923BD_var = UnitGroupUnitFromEnd(auto7C4923BD_g, auto7C4923BD_u);
        if (auto7C4923BD_var == null) { break; }
        UnitIssueOrder(auto7C4923BD_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    auto17756181_g = UnitGroup("TankerTruck", gv_pLAYER_02_DOMINION9, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto17756181_u = UnitGroupCount(auto17756181_g, c_unitCountAll);
    for (;; auto17756181_u -= 1) {
        auto17756181_var = UnitGroupUnitFromEnd(auto17756181_g, auto17756181_u);
        if (auto17756181_var == null) { break; }
        UnitIssueOrder(auto17756181_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    TriggerExecute(gt_EnemyCampInit, true, false);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2135), null, StringExternal("Param/Value/33DF9E71"), StringExternal("Param/Value/B1C67015"));
    autoB25B227E_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB25B227E_u = UnitGroupCount(autoB25B227E_g, c_unitCountAll);
    for (;; autoB25B227E_u -= 1) {
        autoB25B227E_var = UnitGroupUnitFromEnd(autoB25B227E_g, autoB25B227E_u);
        if (autoB25B227E_var == null) { break; }
        UnitCargoCreate(autoB25B227E_var, "Marine", libNtve_gf_DifficultyValueInt(4, 4, 4, 4));
    }
    auto0EF42248_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0EF42248_u = UnitGroupCount(auto0EF42248_g, c_unitCountAll);
    for (;; auto0EF42248_u -= 1) {
        auto0EF42248_var = UnitGroupUnitFromEnd(auto0EF42248_g, auto0EF42248_u);
        if (auto0EF42248_var == null) { break; }
        UnitCargoCreate(auto0EF42248_var, "Marine", libNtve_gf_DifficultyValueInt(4, 4, 4, 4));
    }
    auto2111EEBA_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION4, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2111EEBA_u = UnitGroupCount(auto2111EEBA_g, c_unitCountAll);
    for (;; auto2111EEBA_u -= 1) {
        auto2111EEBA_var = UnitGroupUnitFromEnd(auto2111EEBA_g, auto2111EEBA_u);
        if (auto2111EEBA_var == null) { break; }
        UnitCargoCreate(auto2111EEBA_var, "Marine", libNtve_gf_DifficultyValueInt(3, 3, 4, 4));
    }
    autoDA33160C_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION5, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA33160C_u = UnitGroupCount(autoDA33160C_g, c_unitCountAll);
    for (;; autoDA33160C_u -= 1) {
        autoDA33160C_var = UnitGroupUnitFromEnd(autoDA33160C_g, autoDA33160C_u);
        if (autoDA33160C_var == null) { break; }
        UnitCargoCreate(autoDA33160C_var, "Marine", libNtve_gf_DifficultyValueInt(3, 3, 4, 4));
    }
    auto55C4B393_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION7, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55C4B393_u = UnitGroupCount(auto55C4B393_g, c_unitCountAll);
    for (;; auto55C4B393_u -= 1) {
        auto55C4B393_var = UnitGroupUnitFromEnd(auto55C4B393_g, auto55C4B393_u);
        if (auto55C4B393_var == null) { break; }
        UnitCargoCreate(auto55C4B393_var, "Marine", libNtve_gf_DifficultyValueInt(3, 3, 4, 4));
    }
    auto49D7021E_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION8, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49D7021E_u = UnitGroupCount(auto49D7021E_g, c_unitCountAll);
    for (;; auto49D7021E_u -= 1) {
        auto49D7021E_var = UnitGroupUnitFromEnd(auto49D7021E_g, auto49D7021E_u);
        if (auto49D7021E_var == null) { break; }
        UnitCargoCreate(auto49D7021E_var, "Marine", libNtve_gf_DifficultyValueInt(3, 3, 4, 4));
    }
    auto884B764C_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto884B764C_u = UnitGroupCount(auto884B764C_g, c_unitCountAll);
    for (;; auto884B764C_u -= 1) {
        auto884B764C_var = UnitGroupUnitFromEnd(auto884B764C_g, auto884B764C_u);
        if (auto884B764C_var == null) { break; }
        if ((gf_UnitisHybrid(auto884B764C_var) == true)) {
            UnitBehaviorAddPlayer(auto884B764C_var, "DisableMedicHealing", gv_pLAYER_02_DOMINION3, 1);
        }

    }
    gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_facility = UnitFromId(842);
    gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_facility = UnitFromId(305);
    gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_facility = UnitFromId(313);
    UnitSetState(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_facility, c_unitStateInvulnerable, true);
    UnitSetState(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_facility, c_unitStateInvulnerable, true);
    UnitSetState(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_facility, c_unitStateInvulnerable, true);
    UnitSetState(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_facility, c_unitStateTargetable, false);
    UnitSetState(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_facility, c_unitStateTargetable, false);
    UnitSetState(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_facility, c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PKorhal02_Music_Main";
    gv_normalAmbience = "Ambience_QdBG_PKorhal02_Lp";
    gv_disruptionAmbience = "PKorhal02_Ambience_Disruption";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_normalAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity", "SnowBlizzard", RegionEntireMap());
    gv_normalLight = "KorhalCityEx2";
    gv_disruptionLight = "KorhalNight";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto34AC8ECD_g;
    int auto34AC8ECD_u;
    unit auto34AC8ECD_var;
    unitgroup auto01BDBCF9_g;
    int auto01BDBCF9_u;
    unit auto01BDBCF9_var;
    unitgroup auto6757E0C0_g;
    int auto6757E0C0_u;
    unit auto6757E0C0_var;
    unitgroup auto880CE0AA_g;
    int auto880CE0AA_u;
    unit auto880CE0AA_var;
    playergroup auto752EA8AE_g;
    int auto752EA8AE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_disruptionActiveDuration = 120.0;
    gv_disruptionInactiveDuration = 210.0;
    UnitSetPropertyFixed(gv_ulnarKeystone, c_unitPropLifeMax, 4000.0);
    UnitSetPropertyFixed(gv_ulnarKeystone, c_unitPropLifePercent, 100.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto34AC8ECD_g = UnitGroup("Barracks", gv_pLAYER_02_DOMINION4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto34AC8ECD_u = UnitGroupCount(auto34AC8ECD_g, c_unitCountAll);
        for (;; auto34AC8ECD_u -= 1) {
            auto34AC8ECD_var = UnitGroupUnitFromEnd(auto34AC8ECD_g, auto34AC8ECD_u);
            if (auto34AC8ECD_var == null) { break; }
            UnitBehaviorAddPlayer(auto34AC8ECD_var, "Queue2x", gv_pLAYER_02_DOMINION4, 1);
        }
        auto01BDBCF9_g = UnitGroup("Factory", gv_pLAYER_02_DOMINION4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto01BDBCF9_u = UnitGroupCount(auto01BDBCF9_g, c_unitCountAll);
        for (;; auto01BDBCF9_u -= 1) {
            auto01BDBCF9_var = UnitGroupUnitFromEnd(auto01BDBCF9_g, auto01BDBCF9_u);
            if (auto01BDBCF9_var == null) { break; }
            UnitBehaviorAddPlayer(auto01BDBCF9_var, "Queue2x", gv_pLAYER_02_DOMINION4, 1);
        }
        auto6757E0C0_g = UnitGroup("Barracks", gv_pLAYER_02_DOMINION5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6757E0C0_u = UnitGroupCount(auto6757E0C0_g, c_unitCountAll);
        for (;; auto6757E0C0_u -= 1) {
            auto6757E0C0_var = UnitGroupUnitFromEnd(auto6757E0C0_g, auto6757E0C0_u);
            if (auto6757E0C0_var == null) { break; }
            UnitBehaviorAddPlayer(auto6757E0C0_var, "Queue2x", gv_pLAYER_02_DOMINION5, 1);
        }
        auto880CE0AA_g = UnitGroup("Factory", gv_pLAYER_02_DOMINION5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto880CE0AA_u = UnitGroupCount(auto880CE0AA_g, c_unitCountAll);
        for (;; auto880CE0AA_u -= 1) {
            auto880CE0AA_var = UnitGroupUnitFromEnd(auto880CE0AA_g, auto880CE0AA_u);
            if (auto880CE0AA_var == null) { break; }
            UnitBehaviorAddPlayer(auto880CE0AA_var, "Queue2x", gv_pLAYER_02_DOMINION5, 1);
        }
    }

    auto752EA8AE_g = gv_enemyPlayers;
    auto752EA8AE_var = -1;
    while (true) {
        auto752EA8AE_var = PlayerGroupNextPlayer(auto752EA8AE_g, auto752EA8AE_var);
        if (auto752EA8AE_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "ShieldWall", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "PunisherGrenades", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "NeoSteelAndShrikeTurretIconUpgrade", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "FireSuppressionSystems", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "TerranVehicleAndShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "TerranVehicleAndShipArmorsLevel1", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "ClusterWarheads", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "AresClassWeaponsSystem", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "BearclawNozzles", 1);
            TechTreeUpgradeAddLevel(auto752EA8AE_var, "MaelstromRounds", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("Immortal");
    libVCMI_gf_AddMissionTipCampaign("DisruptionNova");
    libVCMI_gf_EnableDisableNeedPylonInfo(false);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Spectre", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Vulture", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dude's Car Destroyed Again! Q
//--------------------------------------------------------------------------------------------------
bool gt_DudesCarDestroyedAgainQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_misterMarine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_DOMINION2, PointFromId(2133));
    lv_misterMarine = UnitLastCreated();
    UnitIssueOrder(lv_misterMarine, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2134)), c_orderQueueReplace);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(lv_misterMarine, "pMission_Korhal02|Line00142", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DudesCarDestroyedAgainQ_Init () {
    gt_DudesCarDestroyedAgainQ = TriggerCreate("gt_DudesCarDestroyedAgainQ_Func");
    TriggerAddEventUnitDied(gt_DudesCarDestroyedAgainQ, UnitRefFromUnit(UnitFromId(2132)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1F43E1F4"), null, UnitGetPosition(UnitFromId(45)));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    TriggerExecute(gt_DisruptionCycle, true, false);
    TriggerEnable(gt_UpdateBullyStatus, true);
    TriggerExecute(gt_RaynorDayWaves, true, false);
    TriggerExecute(gt_MoebiusCorpsNorthWaves, true, false);
    TriggerExecute(gt_BonusObjectiveWait, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6E44248E"), null, UnitGetPosition(gv_ulnarKeystone));
    TriggerExecute(gt_ObjectiveRecovertheKeystoneCreate, true, false);
    TriggerExecute(gt_ObjectiveRaynorsCommandCenterMustSurviveCreate, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(9), 4.0, false);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_ulnarKeystone), StringExternal("Param/Value/F0011FBE"));
    gv_keystonePing = PingLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    gv_timerWindowVisible = true;
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_ImmortalQ, true, false);
    Wait(12.0, c_timeReal);
    TriggerExecute(gt_RaynorIntroQ, true, false);
    Wait(20.0, c_timeReal);
    TriggerExecute(gt_ValerianIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immortal Q
//--------------------------------------------------------------------------------------------------
bool gt_ImmortalQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmortalQ_Init () {
    gt_ImmortalQ = TriggerCreate("gt_ImmortalQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_raynorCC, "pMission_Korhal02|Line00009", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_raynorCC, "pMission_Korhal02|Line00010", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorIntroQ_Init () {
    gt_RaynorIntroQ = TriggerCreate("gt_RaynorIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_ValerianIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2756A57F_g;
    int auto2756A57F_u;
    unit auto2756A57F_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(19), true);
    auto2756A57F_g = UnitGroup("SCV", gv_pLAYER_02_DOMINION2, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2756A57F_u = UnitGroupCount(auto2756A57F_g, c_unitCountAll);
    for (;; auto2756A57F_u -= 1) {
        auto2756A57F_var = UnitGroupUnitFromEnd(auto2756A57F_g, auto2756A57F_u);
        if (auto2756A57F_var == null) { break; }
        libNtve_gf_PauseUnit(auto2756A57F_var, false);
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BE7F6138"), null, PlayerStartLocation(gv_pLAYER_02_DOMINION2));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(44), true, false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_valerianCC), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00123", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_ObjectiveValeriansCommandCenterMustSurviveCreate, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValerianIntroQ_Init () {
    gt_ValerianIntroQ = TriggerCreate("gt_ValerianIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Break Stuff
//--------------------------------------------------------------------------------------------------
bool gt_HybridBreakStuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_potentialBreakers;
    fixed lv_breakRadius;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto6FC6317C_g;
    int auto6FC6317C_u;
    unit auto6FC6317C_var;
    unitgroup autoF6D2C913_g;
    int autoF6D2C913_u;

    // Variable Initialization
    lv_potentialBreakers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6FC6317C_g = UnitGroup(null, gv_pLAYER_02_DOMINION9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6FC6317C_u = UnitGroupCount(auto6FC6317C_g, c_unitCountAll);
    for (;; auto6FC6317C_u -= 1) {
        auto6FC6317C_var = UnitGroupUnitFromEnd(auto6FC6317C_g, auto6FC6317C_u);
        if (auto6FC6317C_var == null) { break; }
        if ((UnitGetPropertyFixed(auto6FC6317C_var, c_unitPropLifeMax, c_unitPropCurrent) < 100.0)) {
            lv_breakRadius = 1.7;
        }
        else {
            lv_breakRadius = 2.8;
        }
        lv_potentialBreakers = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(auto6FC6317C_var), lv_breakRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF6D2C913_g = lv_potentialBreakers;
        autoF6D2C913_u = UnitGroupCount(autoF6D2C913_g, c_unitCountAll);
        for (;; autoF6D2C913_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoF6D2C913_g, autoF6D2C913_u);
            if (lv_currentUnit == null) { break; }
            if ((gf_UnitisHybrid(lv_currentUnit) == true)) {
                UnitKill(auto6FC6317C_var);
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridBreakStuff_Init () {
    gt_HybridBreakStuff = TriggerCreate("gt_HybridBreakStuff_Func");
    TriggerAddEventTimePeriodic(gt_HybridBreakStuff, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disruption Cycle
//--------------------------------------------------------------------------------------------------
bool gt_DisruptionCycle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        TimerStart(gv_disruptionTimer, gv_disruptionInactiveDuration, false, c_timeAI);
        while (!((gv_timerWindowVisible == true))) {
            Wait(0.0625, c_timeAI);
        }
        if ((gv_disruptionCount == 0)) {
            libVCUI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/DF276B2A"), true, false);
            gv_disruptionTimerWindow = TimerWindowLastCreated();
            TimerWindowSetFormat(gv_disruptionTimerWindow, StringToText("<mintotal/>:<sec2/>"));
        }
        else {
            TimerWindowSetTitle(gv_disruptionTimerWindow, StringExternal("Param/Value/6492D007"));
        }
        libVCUI_gf_SetTimerWindowDangerThreshold(0.0);
        libNtve_gf_WaitForTimer(gv_disruptionTimer, 30.0, false);
        TriggerExecute(gt_DisruptionSoonQ, true, false);
        libNtve_gf_WaitForTimer(gv_disruptionTimer, 2.0, false);
        libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 1.000000 2.000000", "SnowBlizzard", RegionEntireMap());
        GameSetLighting(gv_disruptionLight, 2.0);
        SoundPlayForPlayer(SoundLink("PKorhal02_DisruptionOn", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
        SoundPlayForPlayer(SoundLink("PKorhal02_Disruption_Charge", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        gv_disruptionSound = SoundLastPlayed();
        libNtve_gf_WaitForTimer(gv_disruptionTimer, 0.0, false);
        gv_disruptionActive = true;
        gv_disruptionCount += 1;
        UserDataSetInt("WriterStates", "Korhal02Toggle", "Value", 1, 1);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_disruptionAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PKorhal02_Music_Disruption", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        TriggerExecute(gt_DisruptionBehaviorUpdate, true, false);
        TriggerExecute(gt_HybridWaveController, true, false);
        TimerStart(gv_disruptionTimer, gv_disruptionActiveDuration, false, c_timeAI);
        TimerWindowSetTitle(gv_disruptionTimerWindow, StringExternal("Param/Value/EBCE1BCE"));
        TimerWindowSetFormat(gv_disruptionTimerWindow, StringToText("<mintotal/>:<sec2/>"));
        libVCUI_gf_SetTimerWindowDangerThreshold(300.0);
        if ((gv_disruptionCount == 2)) {
            Wait(20.0, c_timeAI);
            TriggerExecute(gt_DisruptionStunHintQ, true, false);
        }

        libNtve_gf_WaitForTimer(gv_disruptionTimer, 2.0, false);
        libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 0.000000 2.000000", "SnowBlizzard", RegionEntireMap());
        GameSetLighting(gv_normalLight, 2.0);
        SoundPlayForPlayer(SoundLink("PKorhal02_DisruptionOff", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("PKorhal02_Disruption_Blast", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_WaitForTimer(gv_disruptionTimer, 0.0, false);
        gv_disruptionActive = false;
        UserDataSetInt("WriterStates", "Korhal02Toggle", "Value", 1, 0);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_normalAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
        TriggerExecute(gt_DisruptionBehaviorUpdate, true, false);
        gv_masteryDisruptedStructureKills = 0;
        TriggerExecute(gt_SetAIUpgradeLevel, true, false);
        TriggerExecute(gt_MoebiusCorpsPlayerWaveController, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9ADDC0FE"));
        if ((gv_disruptionCount == 1)) {
            TriggerExecute(gt_ValerianDayWavesQ, true, false);
            TriggerExecute(gt_ValerianDayWaves, true, false);
            TriggerExecute(gt_MoebiusCorpsSouthWaves, true, false);
        }
        else {
            TriggerExecute(gt_DisruptionCycleOffQ, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisruptionCycle_Init () {
    gt_DisruptionCycle = TriggerCreate("gt_DisruptionCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disruption Soon Q
//--------------------------------------------------------------------------------------------------
bool gt_DisruptionSoonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto685B5A28_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_FlashTimerWindow(6.0, false);
    auto685B5A28_val = RandomInt(1, 5);
    if (auto685B5A28_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00032", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto685B5A28_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00033", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto685B5A28_val == 3) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00030", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto685B5A28_val == 4) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto685B5A28_val == 5) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisruptionSoonQ_Init () {
    gt_DisruptionSoonQ = TriggerCreate("gt_DisruptionSoonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disruption Behavior Update
//--------------------------------------------------------------------------------------------------
bool gt_DisruptionBehaviorUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_disruptionGroup;
    unitgroup lv_bunkerGroup;

    // Automatic Variable Declarations
    playergroup autoC42A14F7_g;
    int autoC42A14F7_var;
    playergroup auto9E547298_g;
    int auto9E547298_var;
    unitgroup autoED66FF8E_g;
    int autoED66FF8E_u;
    unit autoED66FF8E_var;
    unitgroup auto87C98A71_g;
    int auto87C98A71_u;
    unit auto87C98A71_var;
    playergroup autoF14D7869_g;
    int autoF14D7869_var;
    playergroup auto2B30B57A_g;
    int auto2B30B57A_var;
    unitgroup autoAAC78C72_g;
    int autoAAC78C72_u;
    unit autoAAC78C72_var;
    unitgroup autoCDB92F2E_g;
    int autoCDB92F2E_u;
    unit autoCDB92F2E_var;

    // Variable Initialization
    lv_disruptionGroup = UnitGroupEmpty();
    lv_bunkerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_disruptionActive == true)) {
        UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", true);
        UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", true);
        autoF14D7869_g = gv_dominionGroup;
        autoF14D7869_var = -1;
        while (true) {
            autoF14D7869_var = PlayerGroupNextPlayer(autoF14D7869_g, autoF14D7869_var);
            if (autoF14D7869_var < 0) { break; }
            PlayerModifyPropertyInt(autoF14D7869_var, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, libLotv_gf_DifficultyValueInt2(200, 200, 200, 200));
            UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, autoF14D7869_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_bunkerGroup, UnitGroup("Bunker", autoF14D7869_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        auto2B30B57A_g = gv_enemyPlayers;
        auto2B30B57A_var = -1;
        while (true) {
            auto2B30B57A_var = PlayerGroupNextPlayer(auto2B30B57A_g, auto2B30B57A_var);
            if (auto2B30B57A_var < 0) { break; }
            UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, auto2B30B57A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_bunkerGroup, UnitGroup("Bunker", auto2B30B57A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        autoAAC78C72_g = lv_bunkerGroup;
        autoAAC78C72_u = UnitGroupCount(autoAAC78C72_g, c_unitCountAll);
        for (;; autoAAC78C72_u -= 1) {
            autoAAC78C72_var = UnitGroupUnitFromEnd(autoAAC78C72_g, autoAAC78C72_u);
            if (autoAAC78C72_var == null) { break; }
            UnitGroupAddUnitGroup(lv_disruptionGroup, UnitCargoGroup(autoAAC78C72_var));
        }
        UnitGroupRemove(lv_disruptionGroup, gv_ulnarKeystone);
        UnitGroupRemove(lv_disruptionGroup, UnitFromId(2135));
        autoCDB92F2E_g = lv_disruptionGroup;
        autoCDB92F2E_u = UnitGroupCount(autoCDB92F2E_g, c_unitCountAll);
        for (;; autoCDB92F2E_u -= 1) {
            autoCDB92F2E_var = UnitGroupUnitFromEnd(autoCDB92F2E_g, autoCDB92F2E_u);
            if (autoCDB92F2E_var == null) { break; }
            if ((gf_UnitisHybrid(autoCDB92F2E_var) == true)) {
                UnitGroupRemove(lv_disruptionGroup, autoCDB92F2E_var);
            }
            else {
                UnitBehaviorAddPlayer(autoCDB92F2E_var, "HybridKorhalStun", gv_pLAYER_02_DOMINION3, 1);
            }
        }
    }
    else {
        UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
        UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
        autoC42A14F7_g = gv_dominionGroup;
        autoC42A14F7_var = -1;
        while (true) {
            autoC42A14F7_var = PlayerGroupNextPlayer(autoC42A14F7_g, autoC42A14F7_var);
            if (autoC42A14F7_var < 0) { break; }
            PlayerModifyPropertyInt(autoC42A14F7_var, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 100);
            UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, autoC42A14F7_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_bunkerGroup, UnitGroup("Bunker", autoC42A14F7_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        auto9E547298_g = gv_enemyPlayers;
        auto9E547298_var = -1;
        while (true) {
            auto9E547298_var = PlayerGroupNextPlayer(auto9E547298_g, auto9E547298_var);
            if (auto9E547298_var < 0) { break; }
            UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, auto9E547298_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_bunkerGroup, UnitGroup("Bunker", auto9E547298_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        autoED66FF8E_g = lv_bunkerGroup;
        autoED66FF8E_u = UnitGroupCount(autoED66FF8E_g, c_unitCountAll);
        for (;; autoED66FF8E_u -= 1) {
            autoED66FF8E_var = UnitGroupUnitFromEnd(autoED66FF8E_g, autoED66FF8E_u);
            if (autoED66FF8E_var == null) { break; }
            UnitGroupAddUnitGroup(lv_disruptionGroup, UnitCargoGroup(autoED66FF8E_var));
        }
        auto87C98A71_g = lv_disruptionGroup;
        auto87C98A71_u = UnitGroupCount(auto87C98A71_g, c_unitCountAll);
        for (;; auto87C98A71_u -= 1) {
            auto87C98A71_var = UnitGroupUnitFromEnd(auto87C98A71_g, auto87C98A71_u);
            if (auto87C98A71_var == null) { break; }
            UnitBehaviorRemovePlayer(auto87C98A71_var, "HybridKorhalStun", gv_pLAYER_02_DOMINION3, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisruptionBehaviorUpdate_Init () {
    gt_DisruptionBehaviorUpdate = TriggerCreate("gt_DisruptionBehaviorUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disruption Cycle Off Q
//--------------------------------------------------------------------------------------------------
bool gt_DisruptionCycleOffQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto605857ED_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (gv_disruptionOffTransmissionCounter >= 4) {
        gv_disruptionOffTransmissionCounter = 1;
    }
    else {
        gv_disruptionOffTransmissionCounter = gv_disruptionOffTransmissionCounter + 1;
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto605857ED_val = gv_disruptionOffTransmissionCounter;
    if (auto605857ED_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00136", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto605857ED_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00137", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto605857ED_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00138", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto605857ED_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00139", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisruptionCycleOffQ_Init () {
    gt_DisruptionCycleOffQ = TriggerCreate("gt_DisruptionCycleOffQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disruption Stun Hint Q
//--------------------------------------------------------------------------------------------------
bool gt_DisruptionStunHintQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_achievementDisruptedEnemyKills < 5))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisruptionStunHintQ_Init () {
    gt_DisruptionStunHintQ = TriggerCreate("gt_DisruptionStunHintQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Camp Init
//--------------------------------------------------------------------------------------------------
bool gt_EnemyCampInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyCampIndex;
    int lv_unitIndex;
    point lv_homePosition;

    // Automatic Variable Declarations
    int auto60392102_ae;
    const int auto60392102_ai = 1;
    unitgroup auto0C0B8BA5_g;
    int auto0C0B8BA5_u;
    unit auto0C0B8BA5_var;
    unitgroup auto1D1ECC95_g;
    int auto1D1ECC95_u;
    unit auto1D1ECC95_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemyCampsCount = 5;
    auto60392102_ae = gv_enemyCampsCount;
    lv_enemyCampIndex = 1;
    for ( ; ( (auto60392102_ai >= 0 && lv_enemyCampIndex <= auto60392102_ae) || (auto60392102_ai < 0 && lv_enemyCampIndex >= auto60392102_ae) ) ; lv_enemyCampIndex += auto60392102_ai ) {
        gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromName(("Enemy Camp " + IntToString(lv_enemyCampIndex))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0C0B8BA5_g = gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup;
        auto0C0B8BA5_u = UnitGroupCount(auto0C0B8BA5_g, c_unitCountAll);
        for (;; auto0C0B8BA5_u -= 1) {
            auto0C0B8BA5_var = UnitGroupUnitFromEnd(auto0C0B8BA5_g, auto0C0B8BA5_u);
            if (auto0C0B8BA5_var == null) { break; }
            if ((UnitGetType(auto0C0B8BA5_var) == "Bunker")) {
                UnitGroupAddUnitGroup(gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup, UnitCargoGroup(auto0C0B8BA5_var));
            }

        }
        auto1D1ECC95_g = gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup;
        auto1D1ECC95_u = UnitGroupCount(auto1D1ECC95_g, c_unitCountAll);
        for (;; auto1D1ECC95_u -= 1) {
            auto1D1ECC95_var = UnitGroupUnitFromEnd(auto1D1ECC95_g, auto1D1ECC95_u);
            if (auto1D1ECC95_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(auto1D1ECC95_var) == true)) {
                lv_homePosition = PointWithOffsetPolar(UnitGetPosition(UnitTransport(auto1D1ECC95_var)), 1.0, (UnitCargoValue(auto1D1ECC95_var, c_unitCargoPosition) * (360 / UnitCargoValue(UnitTransport(auto1D1ECC95_var), c_unitCargoUnitCount))));
            }
            else {
                lv_homePosition = UnitGetPosition(auto1D1ECC95_var);
            }
            UnitSetCustomValue(auto1D1ECC95_var, 1, PointGetX(lv_homePosition));
            UnitSetCustomValue(auto1D1ECC95_var, 2, PointGetY(lv_homePosition));
            UnitBehaviorAdd(auto1D1ECC95_var, "DisableMedicHealing", auto1D1ECC95_var, 1);
        }
        gv_enemyCamps[lv_enemyCampIndex].lv_targetDummies = UnitGroup("InvisibleTargetDummy", 0, RegionFromName(("Enemy Camp " + IntToString(lv_enemyCampIndex))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        gv_enemyCamps[lv_enemyCampIndex].lv_aggroRegion = RegionCircle(UnitGroupCenterOfGroup(gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup), 16.0);
    }
    TriggerExecute(gt_EnemyCampController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyCampInit_Init () {
    gt_EnemyCampInit = TriggerCreate("gt_EnemyCampInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Camp Controller
//--------------------------------------------------------------------------------------------------
bool gt_EnemyCampController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyCampIndex;
    int lv_unitIndex;
    bool lv_allCampsDead;
    bool lv_campAggro;
    unitgroup lv_nearbyPlayerUnits;

    // Automatic Variable Declarations
    int autoD00EA96F_ae;
    const int autoD00EA96F_ai = 1;
    unitgroup autoE09DFEAF_g;
    int autoE09DFEAF_u;
    unit autoE09DFEAF_var;
    unitgroup auto1C58204A_g;
    int auto1C58204A_u;
    unit auto1C58204A_var;
    unitgroup autoB5846B09_g;
    int autoB5846B09_u;
    unit autoB5846B09_var;
    unitgroup auto7C9F6961_g;
    int auto7C9F6961_u;
    unit auto7C9F6961_var;
    unitgroup auto05AF8105_g;
    int auto05AF8105_u;
    unit auto05AF8105_var;
    unitgroup auto9B8D08C5_g;
    int auto9B8D08C5_u;
    unit auto9B8D08C5_var;
    int autoEB9B064E_ae;
    const int autoEB9B064E_ai = 1;

    // Variable Initialization
    lv_nearbyPlayerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoD00EA96F_ae = gv_enemyCampsCount;
        lv_enemyCampIndex = 1;
        for ( ; ( (autoD00EA96F_ai >= 0 && lv_enemyCampIndex <= autoD00EA96F_ae) || (autoD00EA96F_ai < 0 && lv_enemyCampIndex >= autoD00EA96F_ae) ) ; lv_enemyCampIndex += autoD00EA96F_ai ) {
            if ((gv_enemyCamps[lv_enemyCampIndex].lv_campAlive == true)) {
                if ((UnitGroupCount(gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup, c_unitCountAlive) == 0)) {
                    gv_enemyCamps[lv_enemyCampIndex].lv_campAlive = false;
                    continue;
                }

                lv_nearbyPlayerUnits = UnitGroup(null, gv_pLAYER_01_USER, gv_enemyCamps[lv_enemyCampIndex].lv_aggroRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((gv_enemyCamps[lv_enemyCampIndex].lv_currentlyAggroed == false)) {
                    lv_campAggro = false;
                    if ((UnitGroupCount(gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup, c_unitCountAlive) < gv_enemyCamps[lv_enemyCampIndex].lv_currentUnitCount)) {
                        lv_campAggro = true;
                    }
                    else {
                        autoE09DFEAF_g = gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup;
                        autoE09DFEAF_u = UnitGroupCount(autoE09DFEAF_g, c_unitCountAll);
                        for (;; autoE09DFEAF_u -= 1) {
                            autoE09DFEAF_var = UnitGroupUnitFromEnd(autoE09DFEAF_g, autoE09DFEAF_u);
                            if (autoE09DFEAF_var == null) { break; }
                            if ((UnitGetDamageTakenTime(autoE09DFEAF_var) <= 1.0)) {
                                lv_campAggro = true;
                            }

                        }
                    }
                    gv_enemyCamps[lv_enemyCampIndex].lv_currentUnitCount = UnitGroupCount(gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup, c_unitCountAlive);
                    if ((lv_campAggro == true) && (UnitGroupCount(lv_nearbyPlayerUnits, c_unitCountAlive) > 0)) {
                        gv_enemyCamps[lv_enemyCampIndex].lv_currentlyAggroed = true;
                        auto1C58204A_g = gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup;
                        auto1C58204A_u = UnitGroupCount(auto1C58204A_g, c_unitCountAll);
                        for (;; auto1C58204A_u -= 1) {
                            auto1C58204A_var = UnitGroupUnitFromEnd(auto1C58204A_g, auto1C58204A_u);
                            if (auto1C58204A_var == null) { break; }
                            AISetUnitScriptControlled(auto1C58204A_var, false);
                        }
                        if ((lv_enemyCampIndex == 1)) {
                            autoB5846B09_g = gv_enemyCamps[lv_enemyCampIndex].lv_targetDummies;
                            autoB5846B09_u = UnitGroupCount(autoB5846B09_g, c_unitCountAll);
                            for (;; autoB5846B09_u -= 1) {
                                autoB5846B09_var = UnitGroupUnitFromEnd(autoB5846B09_g, autoB5846B09_u);
                                if (autoB5846B09_var == null) { break; }
                                UnitRemove(autoB5846B09_var);
                            }
                            auto7C9F6961_g = UnitGroup("PathingBlocker2x2Diagonal", 0, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                            auto7C9F6961_u = UnitGroupCount(auto7C9F6961_g, c_unitCountAll);
                            for (;; auto7C9F6961_u -= 1) {
                                auto7C9F6961_var = UnitGroupUnitFromEnd(auto7C9F6961_g, auto7C9F6961_u);
                                if (auto7C9F6961_var == null) { break; }
                                UnitRemove(auto7C9F6961_var);
                            }
                            UnitKill(UnitFromId(1454));
                        }

                    }

                }
                else {
                    if ((UnitGroupCount(lv_nearbyPlayerUnits, c_unitCountAlive) == 0)) {
                        gv_enemyCamps[lv_enemyCampIndex].lv_currentlyAggroed = false;
                        gv_enemyCamps[lv_enemyCampIndex].lv_currentUnitCount = UnitGroupCount(gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup, c_unitCountAlive);
                    }

                }
                if ((gv_enemyCamps[lv_enemyCampIndex].lv_currentlyAggroed == true)) {
                    auto05AF8105_g = gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup;
                    auto05AF8105_u = UnitGroupCount(auto05AF8105_g, c_unitCountAll);
                    for (;; auto05AF8105_u -= 1) {
                        auto05AF8105_var = UnitGroupUnitFromEnd(auto05AF8105_g, auto05AF8105_u);
                        if (auto05AF8105_var == null) { break; }
                        if ((UnitTypeTestAttribute(UnitGetType(auto05AF8105_var), c_unitAttributeStructure) == false) && (libNtve_gf_UnitIsInsideTransport(auto05AF8105_var) == false)) {
                            libNtve_gf_AICast(auto05AF8105_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyPlayerUnits, UnitGetPosition(auto05AF8105_var)))));
                        }

                    }
                }

                if ((gv_enemyCamps[lv_enemyCampIndex].lv_currentlyAggroed == false)) {
                    auto9B8D08C5_g = gv_enemyCamps[lv_enemyCampIndex].lv_unitGroup;
                    auto9B8D08C5_u = UnitGroupCount(auto9B8D08C5_g, c_unitCountAll);
                    for (;; auto9B8D08C5_u -= 1) {
                        auto9B8D08C5_var = UnitGroupUnitFromEnd(auto9B8D08C5_g, auto9B8D08C5_u);
                        if (auto9B8D08C5_var == null) { break; }
                        if ((UnitIsAlive(auto9B8D08C5_var) == true) && (UnitTypeTestAttribute(UnitGetType(auto9B8D08C5_var), c_unitAttributeStructure) == false) && (libNtve_gf_UnitIsInsideTransport(auto9B8D08C5_var) == false)) {
                            if ((libNtve_gf_UnitInRegion(auto9B8D08C5_var, RegionCircle(gf_EnemyCampUnitsHomePosition(auto9B8D08C5_var), 1.0)) == true)) {
                                if ((UnitGroupCount(gv_enemyCamps[lv_enemyCampIndex].lv_targetDummies, c_unitCountAlive) > 0)) {
                                    UnitIssueOrder(auto9B8D08C5_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_enemyCamps[lv_enemyCampIndex].lv_targetDummies, UnitGetPosition(auto9B8D08C5_var))), c_orderQueueReplace);
                                }

                            }
                            else {
                                UnitIssueOrder(auto9B8D08C5_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_EnemyCampUnitsHomePosition(auto9B8D08C5_var)), c_orderQueueReplace);
                            }
                        }

                    }
                }

            }

        }
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        lv_allCampsDead = true;
        autoEB9B064E_ae = gv_enemyCampsCount;
        lv_enemyCampIndex = 1;
        for ( ; ( (autoEB9B064E_ai >= 0 && lv_enemyCampIndex <= autoEB9B064E_ae) || (autoEB9B064E_ai < 0 && lv_enemyCampIndex >= autoEB9B064E_ae) ) ; lv_enemyCampIndex += autoEB9B064E_ai ) {
            if ((gv_enemyCamps[lv_enemyCampIndex].lv_campAlive == true)) {
                lv_allCampsDead = false;
                break;
            }

        }
        if ((lv_allCampsDead == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyCampController_Init () {
    gt_EnemyCampController = TriggerCreate("gt_EnemyCampController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA967F7D1_g;
    int autoA967F7D1_u;
    unit autoA967F7D1_var;
    unitgroup auto6EB35C43_g;
    int auto6EB35C43_u;
    unit auto6EB35C43_var;
    unitgroup autoE000EF27_g;
    int autoE000EF27_u;
    unit autoE000EF27_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_guards) == true) && (gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_rescued == false)) {
        gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_rescued = true;
        gv_scienceFacilitiesSaved += 1;
        PingDestroy(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_ping);
        TriggerExecute(gt_ObjectiveSecureResearchFacilitiesUpdate, true, false);
        TriggerExecute(gt_BonusUpdateMiddleQ, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D8F68106"));
        autoA967F7D1_g = UnitGroup(null, gv_pLAYER_02_DOMINION6, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA967F7D1_u = UnitGroupCount(autoA967F7D1_g, c_unitCountAll);
        for (;; autoA967F7D1_u -= 1) {
            autoA967F7D1_var = UnitGroupUnitFromEnd(autoA967F7D1_g, autoA967F7D1_u);
            if (autoA967F7D1_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(autoA967F7D1_var, true, gv_pLAYER_01_USER);
            UnitSetTeamColorIndex(autoA967F7D1_var, 3);
        }
        TriggerExecute(gt_MedicSupportCenter, true, false);
        gf_CoreRecoveryVisual(PointWithOffsetPolar(UnitGetPosition(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_facility), 2.0, 225.0));
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_guards) == true) && (gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_rescued == false)) {
        gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_rescued = true;
        gv_scienceFacilitiesSaved += 1;
        PingDestroy(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_ping);
        TriggerExecute(gt_ObjectiveSecureResearchFacilitiesUpdate, true, false);
        TriggerExecute(gt_BonusUpdateNorthQ, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/5EB2C235"));
        auto6EB35C43_g = UnitGroup(null, gv_pLAYER_02_DOMINION6, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6EB35C43_u = UnitGroupCount(auto6EB35C43_g, c_unitCountAll);
        for (;; auto6EB35C43_u -= 1) {
            auto6EB35C43_var = UnitGroupUnitFromEnd(auto6EB35C43_g, auto6EB35C43_u);
            if (auto6EB35C43_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(auto6EB35C43_var, true, gv_pLAYER_01_USER);
            UnitSetTeamColorIndex(auto6EB35C43_var, 3);
        }
        TriggerExecute(gt_SciVesselSupportNorth, true, false);
        gf_CoreRecoveryVisual(PointWithOffsetPolar(UnitGetPosition(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_facility), 2.0, 225.0));
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_guards) == true) && (gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_rescued == false)) {
        gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_rescued = true;
        gv_scienceFacilitiesSaved += 1;
        PingDestroy(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_ping);
        TriggerExecute(gt_ObjectiveSecureResearchFacilitiesUpdate, true, false);
        TriggerExecute(gt_BonusUpdateSouthQ, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/4C7A31AC"));
        autoE000EF27_g = UnitGroup(null, gv_pLAYER_02_DOMINION6, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE000EF27_u = UnitGroupCount(autoE000EF27_g, c_unitCountAll);
        for (;; autoE000EF27_u -= 1) {
            autoE000EF27_var = UnitGroupUnitFromEnd(autoE000EF27_g, autoE000EF27_u);
            if (autoE000EF27_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(autoE000EF27_var, true, gv_pLAYER_01_USER);
            UnitSetTeamColorIndex(autoE000EF27_var, 3);
        }
        TriggerExecute(gt_MedivacSupportSouth, true, false);
        gf_CoreRecoveryVisual(PointWithOffsetPolar(UnitGetPosition(gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_facility), 2.0, 225.0));
    }

    if ((gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_rescued == true) && (gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_rescued == true) && (gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_rescued == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveSecureResearchFacilitiesComplete, true, true);
        TriggerExecute(gt_BonusCompleteQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateBonusObjective_Init () {
    gt_UpdateBonusObjective = TriggerCreate("gt_UpdateBonusObjective_Func");
    TriggerAddEventTimePeriodic(gt_UpdateBonusObjective, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Wait
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(107.0, c_timeAI);
    TriggerExecute(gt_BonusObjectiveIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveWait_Init () {
    gt_BonusObjectiveWait = TriggerCreate("gt_BonusObjectiveWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSecureResearchFacilitiesCreate, true, true);
    if ((gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_rescued == false)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C3160799"), null, RegionGetCenter(RegionFromId(13)));
        libVCMI_gf_CreateObjectivePing(false, RegionGetCenter(RegionFromId(13)), StringExternal("Param/Value/DEEE6861"));
        gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_Middle].lv_ping = PingLastCreated();
    }

    if ((gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_rescued == false)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A40CB3BC"), null, RegionGetCenter(RegionFromId(3)));
        libVCMI_gf_CreateObjectivePing(false, RegionGetCenter(RegionFromId(3)), StringExternal("Param/Value/1F9EBE5D"));
        gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_North].lv_ping = PingLastCreated();
    }

    if ((gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_rescued == false)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E33DBD09"), null, RegionGetCenter(RegionFromId(2)));
        libVCMI_gf_CreateObjectivePing(false, RegionGetCenter(RegionFromId(2)), StringExternal("Param/Value/13CEF182"));
        gv_bonusObjectiveRecord[ge_PRESET_BonusObjectiveLocations_South].lv_ping = PingLastCreated();
    }

    TriggerQueueExit();
    TriggerExecute(gt_BonusIntroTransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveIntroQ_Init () {
    gt_BonusObjectiveIntroQ = TriggerCreate("gt_BonusObjectiveIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Intro Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveIntroTripwire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveIntroTripwire_Init () {
    gt_BonusObjectiveIntroTripwire = TriggerCreate("gt_BonusObjectiveIntroTripwire_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveIntroTripwire, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Intro Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusIntroTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusIntroTransmissionQ_Init () {
    gt_BonusIntroTransmissionQ = TriggerCreate("gt_BonusIntroTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Update Middle Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusUpdateMiddleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_scienceFacilitiesSaved == 1)) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00008", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00008", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusUpdateMiddleQ_Init () {
    gt_BonusUpdateMiddleQ = TriggerCreate("gt_BonusUpdateMiddleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Update North Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusUpdateNorthQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_scienceFacilitiesSaved == 1)) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00006", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00006", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusUpdateNorthQ_Init () {
    gt_BonusUpdateNorthQ = TriggerCreate("gt_BonusUpdateNorthQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Update South Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusUpdateSouthQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_scienceFacilitiesSaved == 1)) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00007", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00007", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusUpdateSouthQ_Init () {
    gt_BonusUpdateSouthQ = TriggerCreate("gt_BonusUpdateSouthQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00093", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusCompleteQ_Init () {
    gt_BonusCompleteQ = TriggerCreate("gt_BonusCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic Support (Center)
//--------------------------------------------------------------------------------------------------
bool gt_MedicSupportCenter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_staticGroup;
    unitgroup lv_reinforcementGroupNorth;
    unitgroup lv_reinforcementGroupSouth;
    region lv_targetRegionNorth;
    region lv_targetRegionSouth;

    // Automatic Variable Declarations
    unitgroup autoB812DB9D_g;
    int autoB812DB9D_u;
    unit autoB812DB9D_var;
    int auto0FD9ABEF_val;
    int auto40ADAB5B_val;
    unitgroup autoABAC3EA3_g;
    int autoABAC3EA3_u;
    unit autoABAC3EA3_var;
    unitgroup autoB0880F67_g;
    int autoB0880F67_u;
    unit autoB0880F67_var;

    // Variable Initialization
    lv_staticGroup = UnitGroupEmpty();
    lv_reinforcementGroupNorth = UnitGroupEmpty();
    lv_reinforcementGroupSouth = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeAI);
        if ((gv_disruptionActive == false) && (UnitGroupCount(lv_staticGroup, c_unitCountAlive) < 3)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMedic", 0, gv_pLAYER_02_DOMINION6, PointFromId(655));
            UnitSetTeamColorIndex(UnitLastCreated(), 3);
            UnitGroupAdd(lv_staticGroup, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
        }

        autoB812DB9D_g = lv_staticGroup;
        autoB812DB9D_u = UnitGroupCount(autoB812DB9D_g, c_unitCountAll);
        for (;; autoB812DB9D_u -= 1) {
            autoB812DB9D_var = UnitGroupUnitFromEnd(autoB812DB9D_g, autoB812DB9D_u);
            if (autoB812DB9D_var == null) { break; }
            if ((gv_disruptionActive == false) && (DistanceBetweenPoints(UnitGetPosition(autoB812DB9D_var), PointFromId(655)) > 11.0)) {
                UnitIssueOrder(autoB812DB9D_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
            }

        }
        auto0FD9ABEF_val = gv_raynorProgressCount;
        if (auto0FD9ABEF_val == 0) {
            lv_targetRegionNorth = RegionFromId(6);
        }
        else if (auto0FD9ABEF_val == 1) {
            lv_targetRegionNorth = RegionFromId(28);
        }
        else if (auto0FD9ABEF_val == 2) {
            lv_targetRegionNorth = RegionFromId(30);
        }
        else {
        }
        auto40ADAB5B_val = gv_valerianProgressCount;
        if (auto40ADAB5B_val == 0) {
            lv_targetRegionSouth = RegionFromId(33);
        }
        else if (auto40ADAB5B_val == 1) {
            lv_targetRegionSouth = RegionFromId(34);
        }
        else if (auto40ADAB5B_val == 2) {
            lv_targetRegionSouth = RegionFromId(35);
        }
        else {
        }
        if ((gv_disruptionActive == false) && (UnitGroupCount(lv_reinforcementGroupNorth, c_unitCountAlive) < 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMedic", 0, gv_pLAYER_02_DOMINION, PointFromId(655));
            UnitGroupAdd(lv_reinforcementGroupNorth, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(1896)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(lv_targetRegionNorth)), c_orderQueueAddToEnd);
            continue;
        }

        if ((gv_disruptionActive == false) && (UnitGroupCount(lv_reinforcementGroupSouth, c_unitCountAlive) < 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMedic", 0, gv_pLAYER_02_DOMINION2, PointFromId(655));
            UnitGroupAdd(lv_reinforcementGroupSouth, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(643)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(lv_targetRegionSouth)), c_orderQueueAddToEnd);
            continue;
        }

        autoABAC3EA3_g = lv_reinforcementGroupNorth;
        autoABAC3EA3_u = UnitGroupCount(autoABAC3EA3_g, c_unitCountAll);
        for (;; autoABAC3EA3_u -= 1) {
            autoABAC3EA3_var = UnitGroupUnitFromEnd(autoABAC3EA3_g, autoABAC3EA3_u);
            if (autoABAC3EA3_var == null) { break; }
            if ((gv_disruptionActive == false) && (DistanceBetweenPoints(UnitGetPosition(autoABAC3EA3_var), RegionGetCenter(lv_targetRegionNorth)) > 11.0)) {
                UnitIssueOrder(autoABAC3EA3_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lv_targetRegionNorth)), c_orderQueueReplace);
            }

        }
        autoB0880F67_g = lv_reinforcementGroupSouth;
        autoB0880F67_u = UnitGroupCount(autoB0880F67_g, c_unitCountAll);
        for (;; autoB0880F67_u -= 1) {
            autoB0880F67_var = UnitGroupUnitFromEnd(autoB0880F67_g, autoB0880F67_u);
            if (autoB0880F67_var == null) { break; }
            if ((gv_disruptionActive == false) && (DistanceBetweenPoints(UnitGetPosition(autoB0880F67_var), RegionGetCenter(lv_targetRegionSouth)) > 11.0)) {
                UnitIssueOrder(autoB0880F67_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lv_targetRegionSouth)), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicSupportCenter_Init () {
    gt_MedicSupportCenter = TriggerCreate("gt_MedicSupportCenter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sci Vessel Support (North)
//--------------------------------------------------------------------------------------------------
bool gt_SciVesselSupportNorth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_staticGroup;
    unitgroup lv_reinforcementGroup;
    region lv_targetRegion;

    // Automatic Variable Declarations
    int auto11850296_val;
    unitgroup auto0ED06ADD_g;
    int auto0ED06ADD_u;
    unit auto0ED06ADD_var;

    // Variable Initialization
    lv_staticGroup = UnitGroupEmpty();
    lv_reinforcementGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(3.0, c_timeAI);
        auto11850296_val = gv_raynorProgressCount;
        if (auto11850296_val == 0) {
            lv_targetRegion = RegionFromId(6);
        }
        else if (auto11850296_val == 1) {
            lv_targetRegion = RegionFromId(28);
        }
        else if (auto11850296_val == 2) {
            lv_targetRegion = RegionFromId(30);
        }
        else {
        }
        if ((gv_disruptionActive == false) && (UnitGroupCount(lv_reinforcementGroup, c_unitCountAlive) < 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", 0, gv_pLAYER_02_DOMINION, PointFromId(815));
            UnitGroupAdd(lv_reinforcementGroup, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(lv_targetRegion)), c_orderQueueReplace);
            continue;
        }

        auto0ED06ADD_g = lv_reinforcementGroup;
        auto0ED06ADD_u = UnitGroupCount(auto0ED06ADD_g, c_unitCountAll);
        for (;; auto0ED06ADD_u -= 1) {
            auto0ED06ADD_var = UnitGroupUnitFromEnd(auto0ED06ADD_g, auto0ED06ADD_u);
            if (auto0ED06ADD_var == null) { break; }
            if ((gv_disruptionActive == false) && (DistanceBetweenPoints(UnitGetPosition(auto0ED06ADD_var), RegionGetCenter(lv_targetRegion)) > 11.0)) {
                UnitIssueOrder(auto0ED06ADD_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lv_targetRegion)), c_orderQueueReplace);
            }

        }
        if ((gv_disruptionActive == false) && (UnitGroupCount(lv_staticGroup, c_unitCountAlive) < 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", 0, gv_pLAYER_02_DOMINION, PointFromId(815));
            UnitGroupAdd(lv_staticGroup, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(42))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SciVesselSupportNorth_Init () {
    gt_SciVesselSupportNorth = TriggerCreate("gt_SciVesselSupportNorth_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medivac Support (South)
//--------------------------------------------------------------------------------------------------
bool gt_MedivacSupportSouth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_staticGroup;
    unitgroup lv_reinforcementGroup;
    region lv_targetRegion;

    // Automatic Variable Declarations
    int autoE919D342_val;
    unitgroup autoFEEE15D3_g;
    int autoFEEE15D3_u;
    unit autoFEEE15D3_var;

    // Variable Initialization
    lv_staticGroup = UnitGroupEmpty();
    lv_reinforcementGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(3.0, c_timeAI);
        autoE919D342_val = gv_valerianProgressCount;
        if (autoE919D342_val == 0) {
            lv_targetRegion = RegionFromId(33);
        }
        else if (autoE919D342_val == 1) {
            lv_targetRegion = RegionFromId(34);
        }
        else if (autoE919D342_val == 2) {
            lv_targetRegion = RegionFromId(35);
        }
        else {
        }
        if ((gv_disruptionActive == false) && (UnitGroupCount(lv_reinforcementGroup, c_unitCountAlive) < 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, gv_pLAYER_02_DOMINION2, PointFromId(524));
            UnitGroupAdd(lv_reinforcementGroup, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(lv_targetRegion)), c_orderQueueReplace);
            continue;
        }

        autoFEEE15D3_g = lv_reinforcementGroup;
        autoFEEE15D3_u = UnitGroupCount(autoFEEE15D3_g, c_unitCountAll);
        for (;; autoFEEE15D3_u -= 1) {
            autoFEEE15D3_var = UnitGroupUnitFromEnd(autoFEEE15D3_g, autoFEEE15D3_u);
            if (autoFEEE15D3_var == null) { break; }
            if ((gv_disruptionActive == false) && (DistanceBetweenPoints(UnitGetPosition(autoFEEE15D3_var), RegionGetCenter(lv_targetRegion)) > 11.0)) {
                UnitIssueOrder(autoFEEE15D3_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lv_targetRegion)), c_orderQueueReplace);
            }

        }
        if ((gv_disruptionActive == false) && (UnitGroupCount(lv_staticGroup, c_unitCountAlive) < 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, gv_pLAYER_02_DOMINION2, PointFromId(524));
            UnitGroupAdd(lv_staticGroup, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedivacSupportSouth_Init () {
    gt_MedivacSupportSouth = TriggerCreate("gt_MedivacSupportSouth_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Day Waves
//--------------------------------------------------------------------------------------------------
bool gt_RaynorDayWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto84A3194D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeAI);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, gv_shadowCorpsNorthPlayers);
    while (true) {
        if ((TimerGetRemaining(gv_disruptionTimer) >= 10.0) && (gv_disruptionActive == false)) {
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_Raynor);
            if (gv_raynorDayWaveAlternator >= 2) {
                gv_raynorDayWaveAlternator = 1;
            }
            else {
                gv_raynorDayWaveAlternator = gv_raynorDayWaveAlternator + 1;
            }
            if ((gv_raynorWaveBoost == true) && (gv_raynorDayWaveAlternator == 1)) {
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Thor");
            }

            auto84A3194D_val = gv_raynorProgressCount;
            if (auto84A3194D_val == 0) {
                AIAttackWaveAddUnits4(3, 3, 3, 3, "Marine");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Goliath");
            }
            else if (auto84A3194D_val == 1) {
                AIAttackWaveAddUnits4(4, 4, 4, 4, "Marine");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Goliath");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Vulture");
            }
            else if (auto84A3194D_val == 2) {
                AIAttackWaveAddUnits4(4, 4, 4, 4, "Marine");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Goliath");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Vulture");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Diamondback");
            }
            else {
            }
            AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
            Wait(20.0, c_timeAI);
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorDayWaves_Init () {
    gt_RaynorDayWaves = TriggerCreate("gt_RaynorDayWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bullies - Raynor Forward 1
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBulliesRaynorForward1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup1;
    unitgroup lv_dropGroup2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropGroup1 = UnitGroupEmpty();
    lv_dropGroup2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_raynorProgressCount += 1;
    TriggerExecute(gt_RaynorForward1Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(195));
    UnitGroupAddUnitGroup(lv_dropGroup1, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(195), lv_dropGroup1, false, gv_pLAYER_02_DOMINION);
    Wait(0.75, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, gv_pLAYER_02_DOMINION, PointFromId(726));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_02_DOMINION, PointFromId(726));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(726), lv_dropGroup2, false, gv_pLAYER_02_DOMINION);
    Wait(3.5, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(7), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBulliesRaynorForward1_Init () {
    gt_ActivateBulliesRaynorForward1 = TriggerCreate("gt_ActivateBulliesRaynorForward1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bullies - Raynor Forward 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBulliesRaynorForward2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup1;
    unitgroup lv_dropGroup2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropGroup1 = UnitGroupEmpty();
    lv_dropGroup2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_raynorProgressCount += 1;
    TriggerExecute(gt_RaynorForward2Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, gv_pLAYER_02_DOMINION, PointFromId(806));
    UnitGroupAddUnitGroup(lv_dropGroup1, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(806), lv_dropGroup1, false, gv_pLAYER_02_DOMINION);
    Wait(0.75, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, gv_pLAYER_02_DOMINION, PointFromId(807));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "SCV", 0, gv_pLAYER_02_DOMINION, PointFromId(807));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(807), lv_dropGroup2, false, gv_pLAYER_02_DOMINION);
    Wait(3.5, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(8), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBulliesRaynorForward2_Init () {
    gt_ActivateBulliesRaynorForward2 = TriggerCreate("gt_ActivateBulliesRaynorForward2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForward1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/ADFDC9D7"), null, RegionGetCenter(RegionFromId(7)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(7)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_raynorCC, "pMission_Korhal02|Line00018", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForward1Q_Init () {
    gt_RaynorForward1Q = TriggerCreate("gt_RaynorForward1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForward2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D8A12491"), null, RegionGetCenter(RegionFromId(8)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(8)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_raynorCC, "pMission_Korhal02|Line00019", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForward2Q_Init () {
    gt_RaynorForward2Q = TriggerCreate("gt_RaynorForward2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Wave Boost
//--------------------------------------------------------------------------------------------------
bool gt_RaynorWaveBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropships;

    // Automatic Variable Declarations
    unitgroup auto4B475C8D_g;
    int auto4B475C8D_u;
    unit auto4B475C8D_var;
    unitgroup auto09832A67_g;
    int auto09832A67_u;
    unit auto09832A67_var;

    // Variable Initialization
    lv_dropships = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TimerGetRemaining(gv_disruptionTimer) >= 30.0) && (gv_disruptionActive == false))) {
        Wait(1.0, c_timeAI);
    }
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Medivac", 0, gv_pLAYER_02_DOMINION, PointFromId(799));
    lv_dropships = UnitLastCreatedGroup();
    auto4B475C8D_g = lv_dropships;
    auto4B475C8D_u = UnitGroupCount(auto4B475C8D_g, c_unitCountAll);
    for (;; auto4B475C8D_u -= 1) {
        auto4B475C8D_var = UnitGroupUnitFromEnd(auto4B475C8D_g, auto4B475C8D_u);
        if (auto4B475C8D_var == null) { break; }
        UnitCargoCreate(auto4B475C8D_var, "Thor", 1);
    }
    UnitGroupIssueOrder(lv_dropships, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), RegionGetCenter(RegionFromId(12))), c_orderQueueReplace);
    while (!((UnitOrderCount(UnitGroupUnit(lv_dropships, 1)) == 0) && (UnitOrderCount(UnitGroupUnit(lv_dropships, 2)) == 0))) {
        Wait(1.0, c_timeAI);
    }
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(12), true);
    gv_raynorWaveBoost = true;
    while ((libNtve_gf_UnitGroupIsDead(lv_dropships) == false) && (libVCMI_gf_GameIsOver() == false)) {
        auto09832A67_g = lv_dropships;
        auto09832A67_u = UnitGroupCount(auto09832A67_g, c_unitCountAll);
        for (;; auto09832A67_u -= 1) {
            auto09832A67_var = UnitGroupUnitFromEnd(auto09832A67_g, auto09832A67_u);
            if (auto09832A67_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto09832A67_var, RegionFromId(10)) == true)) {
                UnitRemove(auto09832A67_var);
            }
            else {
                UnitIssueOrder(auto09832A67_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(10))), c_orderQueueReplace);
            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorWaveBoost_Init () {
    gt_RaynorWaveBoost = TriggerCreate("gt_RaynorWaveBoost_Func");
    TriggerAddEventUnitRegion(gt_RaynorWaveBoost, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Day Waves
//--------------------------------------------------------------------------------------------------
bool gt_ValerianDayWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto97BF3261_val;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION2, gv_shadowCorpsSouthPlayers);
    while (true) {
        if ((TimerGetRemaining(gv_disruptionTimer) >= 10.0) && (gv_disruptionActive == false)) {
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_Valerian);
            if (gv_valerianDayWaveAlternator >= 2) {
                gv_valerianDayWaveAlternator = 1;
            }
            else {
                gv_valerianDayWaveAlternator = gv_valerianDayWaveAlternator + 1;
            }
            if ((gv_valerianWaveBoost == true) && (gv_valerianDayWaveAlternator == 2)) {
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Battlecruiser");
            }

            auto97BF3261_val = gv_valerianProgressCount;
            if (auto97BF3261_val == 0) {
                AIAttackWaveAddUnits4(4, 4, 4, 4, "Marine");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Marauder");
            }
            else if (auto97BF3261_val == 1) {
                AIAttackWaveAddUnits4(6, 6, 6, 6, "Marine");
                AIAttackWaveAddUnits4(1, 1, 1, 1, "Marauder");
            }
            else if (auto97BF3261_val == 2) {
                AIAttackWaveAddUnits4(6, 6, 6, 6, "Marine");
                AIAttackWaveAddUnits4(2, 2, 2, 2, "Marauder");
            }
            else {
            }
            AIAttackWaveSend(gv_pLAYER_02_DOMINION2, 0, false);
            Wait(20.0, c_timeAI);
        }
        else {
            while (!((TimerGetRemaining(gv_disruptionTimer) >= 10.0) && (gv_disruptionActive == false))) {
                Wait(1.0, c_timeAI);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValerianDayWaves_Init () {
    gt_ValerianDayWaves = TriggerCreate("gt_ValerianDayWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Day Waves Q
//--------------------------------------------------------------------------------------------------
bool gt_ValerianDayWavesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_valerianCC, "pMission_Korhal02|Line00042", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValerianDayWavesQ_Init () {
    gt_ValerianDayWavesQ = TriggerCreate("gt_ValerianDayWavesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bullies - Valerian Forward 1
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBulliesValerianForward1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup1;
    unitgroup lv_dropGroup2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropGroup1 = UnitGroupEmpty();
    lv_dropGroup2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_valerianProgressCount += 1;
    TriggerExecute(gt_ValerianForward1Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, gv_pLAYER_02_DOMINION2, PointFromId(877));
    UnitGroupAddUnitGroup(lv_dropGroup1, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(877), lv_dropGroup1, false, gv_pLAYER_02_DOMINION2);
    Wait(0.75, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Medic", 0, gv_pLAYER_02_DOMINION2, PointFromId(878));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_02_DOMINION2, PointFromId(878));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(878), lv_dropGroup2, false, gv_pLAYER_02_DOMINION2);
    Wait(3.5, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(20), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBulliesValerianForward1_Init () {
    gt_ActivateBulliesValerianForward1 = TriggerCreate("gt_ActivateBulliesValerianForward1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bullies - Valerian Forward 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBulliesValerianForward2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup1;
    unitgroup lv_dropGroup2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropGroup1 = UnitGroupEmpty();
    lv_dropGroup2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_valerianProgressCount += 1;
    TriggerExecute(gt_ValerianForward2Q, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, gv_pLAYER_02_DOMINION2, PointFromId(886));
    UnitGroupAddUnitGroup(lv_dropGroup1, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, gv_pLAYER_02_DOMINION2, PointFromId(886));
    UnitGroupAddUnitGroup(lv_dropGroup1, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(886), lv_dropGroup1, false, gv_pLAYER_02_DOMINION2);
    Wait(0.75, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Medic", 0, gv_pLAYER_02_DOMINION2, PointFromId(887));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "SCV", 0, gv_pLAYER_02_DOMINION2, PointFromId(887));
    UnitGroupAddUnitGroup(lv_dropGroup2, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(887), lv_dropGroup2, false, gv_pLAYER_02_DOMINION2);
    Wait(3.5, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(21), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBulliesValerianForward2_Init () {
    gt_ActivateBulliesValerianForward2 = TriggerCreate("gt_ActivateBulliesValerianForward2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Forward 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_ValerianForward1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1AD805E5"), null, RegionGetCenter(RegionFromId(20)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_valerianCC, "pMission_Korhal02|Line00022", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValerianForward1Q_Init () {
    gt_ValerianForward1Q = TriggerCreate("gt_ValerianForward1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Forward 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_ValerianForward2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E0597AB5"), null, RegionGetCenter(RegionFromId(21)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(21)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_valerianCC, "pMission_Korhal02|Line00023", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValerianForward2Q_Init () {
    gt_ValerianForward2Q = TriggerCreate("gt_ValerianForward2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Wave Boost
//--------------------------------------------------------------------------------------------------
bool gt_ValerianWaveBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_battlecruisers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_battlecruisers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TimerGetRemaining(gv_disruptionTimer) >= 30.0) && (gv_disruptionActive == false))) {
        Wait(1.0, c_timeAI);
    }
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Battlecruiser", 0, gv_pLAYER_02_DOMINION2, PointFromId(912));
    lv_battlecruisers = UnitLastCreatedGroup();
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
    while (!((UnitOrderCount(UnitGroupUnit(lv_battlecruisers, 1)) == 0))) {
        Wait(1.0, c_timeAI);
    }
    AISetGroupScriptControlled(lv_battlecruisers, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(24), true);
    gv_valerianWaveBoost = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValerianWaveBoost_Init () {
    gt_ValerianWaveBoost = TriggerCreate("gt_ValerianWaveBoost_Func");
    TriggerAddEventUnitRegion(gt_ValerianWaveBoost, null, RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Corps -> Player Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusCorpsPlayerWaveController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Automatic Variable Declarations
    int autoF301EA75_val;
    int auto2CFC4F1B_val;

    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    autoF301EA75_val = gv_disruptionCount;
    if (autoF301EA75_val == 0) {
    }
    else if (autoF301EA75_val == 1) {
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(4, 4, 6, 6), "Marine", ge_PRESET_AttackWaveDirection_North);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 1, 3), "Marauder", ge_PRESET_AttackWaveDirection_North);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Raven", ge_PRESET_AttackWaveDirection_North);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeCenterNorth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_waveGroup);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        while (!(((libNtve_gf_UnitGroupIsDead(lv_waveGroup) == true) || (libNtve_gf_UnitInRegion(UnitGroupUnit(lv_waveGroup, 1), RegionFromId(32)) == true)))) {
            Wait(0.5, c_timeGame);
        }
        if ((libNtve_gf_UnitGroupIsDead(lv_waveGroup) == false)) {
            TriggerExecute(gt_MoebiusCorpsAttacksArtanisQ, true, true);
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_waveGroup), 2.0, Color(100.00, 0.00, 0.00));
        }

        lv_waveGroup = UnitGroupEmpty();
    }
    else if (autoF301EA75_val == 2) {
        Wait(20.0, c_timeAI);
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(8, 8, 10, 14), "Marine", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "VikingAssault", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "ScienceVessel", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeCenterSouth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_waveGroup);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        lv_waveGroup = UnitGroupEmpty();
    }
    else if (autoF301EA75_val == 3) {
        Wait(20.0, c_timeAI);
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(6, 6, 6, 6), "Marine", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Firebat", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Marauder", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "SiegeTank", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Raven", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeCenterSouth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_waveGroup);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        lv_waveGroup = UnitGroupEmpty();
    }
    else {
        auto2CFC4F1B_val = ModI(gv_disruptionCount, 2);
        if (auto2CFC4F1B_val == 0) {
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(7, 7, 8, 9), "Marine", ge_PRESET_AttackWaveDirection_North);
            UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(3, 3, 5, 6), "VikingAssault", ge_PRESET_AttackWaveDirection_North);
            UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "SiegeTank", ge_PRESET_AttackWaveDirection_North);
            UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "ScienceVessel", ge_PRESET_AttackWaveDirection_North);
            UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeCenterNorth);
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_waveGroup);
            AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            lv_waveGroup = UnitGroupEmpty();
        }
        else if (auto2CFC4F1B_val == 1) {
            Wait(20.0, c_timeAI);
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(8, 8, 10, 13), "Marine", ge_PRESET_AttackWaveDirection_South);
            UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Battlecruiser", ge_PRESET_AttackWaveDirection_South);
            UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Raven", ge_PRESET_AttackWaveDirection_South);
            UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeCenterSouth);
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_waveGroup);
            AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            lv_waveGroup = UnitGroupEmpty();
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusCorpsPlayerWaveController_Init () {
    gt_MoebiusCorpsPlayerWaveController = TriggerCreate("gt_MoebiusCorpsPlayerWaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Corps Attacks Artanis Q
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusCorpsAttacksArtanisQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00012", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00097", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusCorpsAttacksArtanisQ_Init () {
    gt_MoebiusCorpsAttacksArtanisQ = TriggerCreate("gt_MoebiusCorpsAttacksArtanisQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Corps North Waves
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusCorpsNorthWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_disruptionBufferTime;

    // Automatic Variable Declarations
    int auto72203224_val;
    int autoDE2F5977_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeAI);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION4, PlayerGroupSingle(gv_pLAYER_02_DOMINION));
    while (true) {
        auto72203224_val = gv_raynorProgressCount;
        if (auto72203224_val == 0) {
            lv_disruptionBufferTime = 75.0;
        }
        else if (auto72203224_val == 1) {
            lv_disruptionBufferTime = 60.0;
        }
        else if (auto72203224_val == 2) {
            lv_disruptionBufferTime = 45.0;
        }
        else {
        }
        if ((TimerGetRemaining(gv_disruptionTimer) >= lv_disruptionBufferTime) && (gv_disruptionActive == false)) {
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_AlphaNorth);
            autoDE2F5977_val = gv_raynorProgressCount;
            if (autoDE2F5977_val == 0) {
                AIAttackWaveAddUnits4(2, 2, 4, 4, "Marine");
                AIAttackWaveAddUnits4(1, 1, 1, 2, "Goliath");
            }
            else if (autoDE2F5977_val == 1) {
                AIAttackWaveAddUnits4(4, 4, 4, 4, "Marine");
                AIAttackWaveAddUnits4(1, 1, 2, 3, "Goliath");
            }
            else if (autoDE2F5977_val == 2) {
                AIAttackWaveAddUnits4(5, 5, 6, 6, "Marine");
                AIAttackWaveAddUnits4(1, 1, 2, 3, "Goliath");
            }
            else {
            }
            AIAttackWaveSend(gv_pLAYER_02_DOMINION4, 0, false);
            Wait(20.0, c_timeAI);
        }
        else {
            while (!((TimerGetRemaining(gv_disruptionTimer) >= lv_disruptionBufferTime) && (gv_disruptionActive == false))) {
                Wait(1.0, c_timeAI);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusCorpsNorthWaves_Init () {
    gt_MoebiusCorpsNorthWaves = TriggerCreate("gt_MoebiusCorpsNorthWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moebius Corps South Waves
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusCorpsSouthWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_disruptionBufferTime;

    // Automatic Variable Declarations
    int auto46B2BD37_val;
    int auto1F047E77_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION5, PlayerGroupSingle(gv_pLAYER_02_DOMINION2));
    while (true) {
        auto46B2BD37_val = gv_valerianProgressCount;
        if (auto46B2BD37_val == 0) {
            lv_disruptionBufferTime = 75.0;
        }
        else if (auto46B2BD37_val == 1) {
            lv_disruptionBufferTime = 60.0;
        }
        else if (auto46B2BD37_val == 2) {
            lv_disruptionBufferTime = 45.0;
        }
        else {
        }
        if ((TimerGetRemaining(gv_disruptionTimer) >= lv_disruptionBufferTime) && (gv_disruptionActive == false)) {
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_AlphaSouth);
            auto1F047E77_val = gv_valerianProgressCount;
            if (auto1F047E77_val == 0) {
                AIAttackWaveAddUnits4(4, 4, 5, 5, "Marine");
                AIAttackWaveAddUnits4(0, 0, 1, 2, "Firebat");
            }
            else if (auto1F047E77_val == 1) {
                AIAttackWaveAddUnits4(4, 4, 5, 5, "Marine");
                AIAttackWaveAddUnits4(1, 1, 2, 3, "Firebat");
            }
            else if (auto1F047E77_val == 2) {
                AIAttackWaveAddUnits4(6, 6, 7, 7, "Marine");
                AIAttackWaveAddUnits4(1, 1, 2, 3, "Firebat");
            }
            else {
            }
            AIAttackWaveSend(gv_pLAYER_02_DOMINION5, 0, false);
            Wait(20.0, c_timeAI);
        }
        else {
            while (!((TimerGetRemaining(gv_disruptionTimer) >= lv_disruptionBufferTime) && (gv_disruptionActive == false))) {
                Wait(1.0, c_timeAI);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusCorpsSouthWaves_Init () {
    gt_MoebiusCorpsSouthWaves = TriggerCreate("gt_MoebiusCorpsSouthWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Bullies - Moebius Corps North Forward 1
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateBulliesMoebiusCorpsNorthForward1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION7, RegionFromId(7), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateBulliesMoebiusCorpsNorthForward1_Init () {
    gt_DeactivateBulliesMoebiusCorpsNorthForward1 = TriggerCreate("gt_DeactivateBulliesMoebiusCorpsNorthForward1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Bullies - Moebius Corps North Forward 2
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateBulliesMoebiusCorpsNorthForward2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION7, RegionFromId(8), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateBulliesMoebiusCorpsNorthForward2_Init () {
    gt_DeactivateBulliesMoebiusCorpsNorthForward2 = TriggerCreate("gt_DeactivateBulliesMoebiusCorpsNorthForward2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Bullies - Moebius Corps South Forward 1
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateBulliesMoebiusCorpsSouthForward1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION8, RegionFromId(20), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateBulliesMoebiusCorpsSouthForward1_Init () {
    gt_DeactivateBulliesMoebiusCorpsSouthForward1 = TriggerCreate("gt_DeactivateBulliesMoebiusCorpsSouthForward1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Bullies - Moebius Corps South Forward 2
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateBulliesMoebiusCorpsSouthForward2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION8, RegionFromId(21), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateBulliesMoebiusCorpsSouthForward2_Init () {
    gt_DeactivateBulliesMoebiusCorpsSouthForward2 = TriggerCreate("gt_DeactivateBulliesMoebiusCorpsSouthForward2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_HybridWaveController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_northWave;
    unitgroup lv_centerWave;
    unitgroup lv_southWave;

    // Automatic Variable Declarations
    int auto5A3E4D53_val;
    int autoEA5BB84C_val;
    unitgroup auto4FBF12EE_g;
    int auto4FBF12EE_u;
    unit auto4FBF12EE_var;
    unitgroup auto6EF33E69_g;
    int auto6EF33E69_u;
    unit auto6EF33E69_var;

    // Variable Initialization
    lv_northWave = UnitGroupEmpty();
    lv_centerWave = UnitGroupEmpty();
    lv_southWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridWaveGroup = UnitGroupEmpty();
    auto5A3E4D53_val = gv_disruptionCount;
    if (auto5A3E4D53_val == 1) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_02_DOMINION));
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridDestroyer", ge_PRESET_AttackWaveDirection_North);
        UnitGroupAddUnitGroup(lv_northWave, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeNorth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_northWave);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        gf_HybridWavePing(lv_northWave);
        TriggerExecute(gt_HybridAttacksQ, true, false);
        UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_northWave);
        lv_northWave = UnitGroupEmpty();
        Wait(45.0, c_timeAI);
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "HybridDestroyer", ge_PRESET_AttackWaveDirection_North);
        UnitGroupAddUnitGroup(lv_northWave, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeNorth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_northWave);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        gf_HybridWavePing(lv_northWave);
        UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_northWave);
        lv_northWave = UnitGroupEmpty();
        TriggerExecute(gt_HybridWaveDeadQ, true, false);
    }
    else if (auto5A3E4D53_val == 2) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_02_DOMINION2));
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 3, 3), "HybridReaver", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "HybridDestroyer", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeSouth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_southWave);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        gf_HybridWavePing(lv_southWave);
        TriggerExecute(gt_HybridAttacksQ, true, false);
        UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_southWave);
        lv_southWave = UnitGroupEmpty();
        Wait(45.0, c_timeAI);
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 2, 2), "HybridReaver", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "HybridDestroyer", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeSouth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_southWave);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        gf_HybridWavePing(lv_southWave);
        UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_southWave);
        lv_southWave = UnitGroupEmpty();
        TriggerExecute(gt_HybridWaveDeadQ, true, false);
    }
    else if (auto5A3E4D53_val == 3) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_02_DOMINION2));
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridReaver", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridDestroyer", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeSouth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_southWave);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        gf_HybridWavePing(lv_southWave);
        TriggerExecute(gt_HybridAttacksQ, true, false);
        UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_southWave);
        lv_southWave = UnitGroupEmpty();
        Wait(45.0, c_timeAI);
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridReaver", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "HybridDestroyer", ge_PRESET_AttackWaveDirection_South);
        UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
        gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeSouth);
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_southWave);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
        gf_HybridWavePing(lv_southWave);
        UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_southWave);
        lv_southWave = UnitGroupEmpty();
        TriggerExecute(gt_HybridWaveDeadQ, true, false);
    }
    else {
        autoEA5BB84C_val = ModI(gv_disruptionCount, 2);
        if (autoEA5BB84C_val == 0) {
            AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_02_DOMINION));
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "HybridReaver", ge_PRESET_AttackWaveDirection_North);
            UnitGroupAddUnitGroup(lv_northWave, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "HybridDestroyer", ge_PRESET_AttackWaveDirection_North);
            UnitGroupAddUnitGroup(lv_northWave, UnitLastCreatedGroup());
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeNorth);
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_northWave);
            AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            gf_HybridWavePing(lv_northWave);
            TriggerExecute(gt_HybridAttacksQ, true, false);
            UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_northWave);
            lv_northWave = UnitGroupEmpty();
            Wait(45.0, c_timeAI);
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(5, 5, 4, 4), "HybridDestroyer", ge_PRESET_AttackWaveDirection_North);
            UnitGroupAddUnitGroup(lv_northWave, UnitLastCreatedGroup());
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "HybridDominatorVoid", ge_PRESET_AttackWaveDirection_North);
                UnitGroupAddUnitGroup(lv_northWave, UnitLastCreatedGroup());
                auto4FBF12EE_g = UnitLastCreatedGroup();
                auto4FBF12EE_u = UnitGroupCount(auto4FBF12EE_g, c_unitCountAll);
                for (;; auto4FBF12EE_u -= 1) {
                    auto4FBF12EE_var = UnitGroupUnitFromEnd(auto4FBF12EE_g, auto4FBF12EE_u);
                    if (auto4FBF12EE_var == null) { break; }
                    gf_HybridDominatorAI(auto4FBF12EE_var);
                }
            }

            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeNorth);
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_northWave);
            AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            gf_HybridWavePing(lv_northWave);
            UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_northWave);
            lv_northWave = UnitGroupEmpty();
            TriggerExecute(gt_HybridWaveDeadQ, true, false);
        }
        else if (autoEA5BB84C_val == 1) {
            AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_02_DOMINION2));
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(3, 3, 2, 2), "HybridReaver", ge_PRESET_AttackWaveDirection_South);
            UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 4, 6), "HybridDestroyer", ge_PRESET_AttackWaveDirection_South);
            UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeSouth);
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_southWave);
            AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            gf_HybridWavePing(lv_southWave);
            TriggerExecute(gt_HybridAttacksQ, true, false);
            UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_southWave);
            lv_southWave = UnitGroupEmpty();
            Wait(45.0, c_timeAI);
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(1, 1, 4, 4), "HybridReaver", ge_PRESET_AttackWaveDirection_South);
            UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
            gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(3, 3, 0, 0), "HybridDestroyer", ge_PRESET_AttackWaveDirection_South);
            UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                gf_CreateAttackWaveUnits(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "HybridDominatorVoid", ge_PRESET_AttackWaveDirection_South);
                UnitGroupAddUnitGroup(lv_southWave, UnitLastCreatedGroup());
                auto6EF33E69_g = UnitLastCreatedGroup();
                auto6EF33E69_u = UnitGroupCount(auto6EF33E69_g, c_unitCountAll);
                for (;; auto6EF33E69_u -= 1) {
                    auto6EF33E69_var = UnitGroupUnitFromEnd(auto6EF33E69_g, auto6EF33E69_u);
                    if (auto6EF33E69_var == null) { break; }
                    gf_HybridDominatorAI(auto6EF33E69_var);
                }
            }

            gf_SetWaveWaypoints(ge_PRESET_WaveOrigin_FreezeSouth);
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_southWave);
            AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            gf_HybridWavePing(lv_southWave);
            UnitGroupAddUnitGroup(gv_hybridWaveGroup, lv_southWave);
            lv_southWave = UnitGroupEmpty();
            TriggerExecute(gt_HybridWaveDeadQ, true, false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridWaveController_Init () {
    gt_HybridWaveController = TriggerCreate("gt_HybridWaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Attacks Q
//--------------------------------------------------------------------------------------------------
bool gt_HybridAttacksQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE589EBC5_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (gv_hybridTauntCounter >= 5) {
        gv_hybridTauntCounter = 1;
    }
    else {
        gv_hybridTauntCounter = gv_hybridTauntCounter + 1;
    }
    autoE589EBC5_val = gv_hybridTauntCounter;
    if (autoE589EBC5_val == 1) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00014", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoE589EBC5_val == 2) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00038", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoE589EBC5_val == 3) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00039", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoE589EBC5_val == 4) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00040", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoE589EBC5_val == 5) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00028", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAttacksQ_Init () {
    gt_HybridAttacksQ = TriggerCreate("gt_HybridAttacksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Wave Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_HybridWaveDeadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto437CCD53_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitGroupCount(gv_hybridWaveGroup, c_unitCountAlive) > 0)) {
        if (((TimerGetRemaining(gv_disruptionTimer) <= 10.0) || (gv_disruptionActive == false))) {
            return true;
        }

        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if (gv_hybridDeadLineCounter >= 4) {
        gv_hybridDeadLineCounter = 1;
    }
    else {
        gv_hybridDeadLineCounter = gv_hybridDeadLineCounter + 1;
    }
    auto437CCD53_val = gv_hybridDeadLineCounter;
    if (auto437CCD53_val == 1) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00131", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto437CCD53_val == 2) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00140", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto437CCD53_val == 3) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00141", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto437CCD53_val == 4) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridWaveDeadQ_Init () {
    gt_HybridWaveDeadQ = TriggerCreate("gt_HybridWaveDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Bully Status
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBullyStatus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true)) {
        TriggerExecute(gt_DeactivateBulliesMoebiusCorpsNorthForward1, true, false);
        if ((TimerGetRemaining(gv_disruptionTimer) >= 10.0) && (gv_disruptionActive == false)) {
            TriggerExecute(gt_ActivateBulliesRaynorForward1, true, false);
        }

    }

    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true)) {
        TriggerExecute(gt_DeactivateBulliesMoebiusCorpsNorthForward2, true, false);
        if ((TimerGetRemaining(gv_disruptionTimer) >= 10.0) && (gv_disruptionActive == false)) {
            TriggerExecute(gt_ActivateBulliesRaynorForward2, true, false);
        }

    }

    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION8, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true)) {
        TriggerExecute(gt_DeactivateBulliesMoebiusCorpsSouthForward1, true, false);
        if ((TimerGetRemaining(gv_disruptionTimer) >= 10.0) && (gv_disruptionActive == false)) {
            TriggerExecute(gt_ActivateBulliesValerianForward1, true, false);
        }

    }

    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_DOMINION8, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true)) {
        TriggerExecute(gt_DeactivateBulliesMoebiusCorpsSouthForward2, true, false);
        if ((TimerGetRemaining(gv_disruptionTimer) >= 10.0) && (gv_disruptionActive == false)) {
            TriggerExecute(gt_ActivateBulliesValerianForward2, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateBullyStatus_Init () {
    gt_UpdateBullyStatus = TriggerCreate("gt_UpdateBullyStatus_Func");
    TriggerEnable(gt_UpdateBullyStatus, false);
    TriggerAddEventTimePeriodic(gt_UpdateBullyStatus, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAB6A00D6_g;
    int autoAB6A00D6_u;
    unit autoAB6A00D6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    AISetAPM(gv_pLAYER_02_DOMINION, 10000);
    AISetAPM(gv_pLAYER_02_DOMINION2, 10000);
    AISetDifficulty(gv_pLAYER_02_DOMINION, c_diffAutoLoadBunkers, true);
    AISetDifficulty(gv_pLAYER_02_DOMINION2, c_diffAutoLoadBunkers, true);
    AISetDifficulty(gv_pLAYER_02_DOMINION, c_diffRepairDamage, true);
    AISetDifficulty(gv_pLAYER_02_DOMINION2, c_diffRepairDamage, true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(1), true);
    autoAB6A00D6_g = UnitGroup("HybridDominatorVoid", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB6A00D6_u = UnitGroupCount(autoAB6A00D6_g, c_unitCountAll);
    for (;; autoAB6A00D6_u -= 1) {
        autoAB6A00D6_var = UnitGroupUnitFromEnd(autoAB6A00D6_g, autoAB6A00D6_u);
        if (autoAB6A00D6_var == null) { break; }
        gf_HybridDominatorAI(autoAB6A00D6_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION8, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION8, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set AI Upgrade Level
//--------------------------------------------------------------------------------------------------
bool gt_SetAIUpgradeLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEF149FC0_val;
    playergroup auto26E658DD_g;
    int auto26E658DD_var;
    playergroup autoC928D1E2_g;
    int autoC928D1E2_var;
    playergroup autoEC1E1AE7_g;
    int autoEC1E1AE7_var;
    playergroup auto537EA5ED_g;
    int auto537EA5ED_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF149FC0_val = gv_disruptionCount;
    if (autoEF149FC0_val == 1) {
    }
    else if (autoEF149FC0_val == 2) {
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            auto26E658DD_g = gv_enemyPlayers;
            auto26E658DD_var = -1;
            while (true) {
                auto26E658DD_var = PlayerGroupNextPlayer(auto26E658DD_g, auto26E658DD_var);
                if (auto26E658DD_var < 0) { break; }
                TechTreeUpgradeAddLevel(auto26E658DD_var, "TerranInfantryWeaponsLevel1", 1);
                TechTreeUpgradeAddLevel(auto26E658DD_var, "TerranVehicleAndShipWeaponsLevel1", 1);
            }
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            autoC928D1E2_g = gv_enemyPlayers;
            autoC928D1E2_var = -1;
            while (true) {
                autoC928D1E2_var = PlayerGroupNextPlayer(autoC928D1E2_g, autoC928D1E2_var);
                if (autoC928D1E2_var < 0) { break; }
                TechTreeUpgradeAddLevel(autoC928D1E2_var, "TerranInfantryWeaponsLevel2", 1);
                TechTreeUpgradeAddLevel(autoC928D1E2_var, "TerranVehicleAndShipWeaponsLevel2", 1);
            }
        }

    }
    else if (autoEF149FC0_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            autoEC1E1AE7_g = gv_enemyPlayers;
            autoEC1E1AE7_var = -1;
            while (true) {
                autoEC1E1AE7_var = PlayerGroupNextPlayer(autoEC1E1AE7_g, autoEC1E1AE7_var);
                if (autoEC1E1AE7_var < 0) { break; }
                TechTreeUpgradeAddLevel(autoEC1E1AE7_var, "TerranInfantryArmorsLevel1", 1);
                TechTreeUpgradeAddLevel(autoEC1E1AE7_var, "TerranVehicleAndShipArmorsLevel1", 1);
            }
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            auto537EA5ED_g = gv_enemyPlayers;
            auto537EA5ED_var = -1;
            while (true) {
                auto537EA5ED_var = PlayerGroupNextPlayer(auto537EA5ED_g, auto537EA5ED_var);
                if (auto537EA5ED_var < 0) { break; }
                TechTreeUpgradeAddLevel(auto537EA5ED_var, "TerranInfantryArmorsLevel2", 1);
                TechTreeUpgradeAddLevel(auto537EA5ED_var, "TerranVehicleAndShipArmorsLevel2", 1);
            }
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetAIUpgradeLevel_Init () {
    gt_SetAIUpgradeLevel = TriggerCreate("gt_SetAIUpgradeLevel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/9D9BB4CE"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Ally Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAllyDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_defeatText;

    // Automatic Variable Declarations
    unit autoD76A27D3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    autoD76A27D3_val = EventUnit();
    if (autoD76A27D3_val == gv_raynorCC) {
        lv_defeatText = StringExternal("Param/Value/A3BCD7B0");
        TriggerExecute(gt_ObjectiveRaynorsCommandCenterMustSurviveFailed, true, false);
    }
    else if (autoD76A27D3_val == gv_valerianCC) {
        lv_defeatText = StringExternal("Param/Value/1A289CC5");
        TriggerExecute(gt_ObjectiveValeriansCommandCenterMustSurviveFailed, true, false);
    }
    else {
        lv_defeatText = StringExternal("Param/Value/D57251A8");
    }
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, lv_defeatText, libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAllyDead_Init () {
    gt_DefeatAllyDead = TriggerCreate("gt_DefeatAllyDead_Func");
    TriggerAddEventUnitDied(gt_DefeatAllyDead, UnitRefFromVariable("gv_raynorCC"));
    TriggerAddEventUnitDied(gt_DefeatAllyDead, UnitRefFromVariable("gv_valerianCC"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Recover the Keystone Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryRecovertheKeystoneCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_victoryKeystoneModel;
    unitgroup lv_disruptionGroup;
    unitgroup lv_bunkerGroup;

    // Automatic Variable Declarations
    playergroup autoC6FBBD41_g;
    int autoC6FBBD41_var;
    playergroup auto0C9C8241_g;
    int auto0C9C8241_var;
    unitgroup autoE5217EA1_g;
    int autoE5217EA1_u;
    unit autoE5217EA1_var;
    unitgroup autoE1C3ADD0_g;
    int autoE1C3ADD0_u;
    unit autoE1C3ADD0_var;

    // Variable Initialization
    lv_disruptionGroup = UnitGroupEmpty();
    lv_bunkerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_ulnarKeystone), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    TriggerStop(gt_DisruptionCycle);
    TimerPause(gv_disruptionTimer, true);
    TimerWindowShow(gv_disruptionTimerWindow, PlayerGroupAll(), false);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 0.000000 2.000000", "SnowBlizzard", RegionEntireMap());
    GameSetLighting(gv_normalLight, 2.0);
    Wait(1.0, c_timeGame);
    autoC6FBBD41_g = gv_dominionGroup;
    autoC6FBBD41_var = -1;
    while (true) {
        autoC6FBBD41_var = PlayerGroupNextPlayer(autoC6FBBD41_g, autoC6FBBD41_var);
        if (autoC6FBBD41_var < 0) { break; }
        PlayerModifyPropertyInt(autoC6FBBD41_var, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 100);
        UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, autoC6FBBD41_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_bunkerGroup, UnitGroup("Bunker", autoC6FBBD41_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    auto0C9C8241_g = gv_enemyPlayers;
    auto0C9C8241_var = -1;
    while (true) {
        auto0C9C8241_var = PlayerGroupNextPlayer(auto0C9C8241_g, auto0C9C8241_var);
        if (auto0C9C8241_var < 0) { break; }
        UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, auto0C9C8241_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_bunkerGroup, UnitGroup("Bunker", auto0C9C8241_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    autoE5217EA1_g = lv_bunkerGroup;
    autoE5217EA1_u = UnitGroupCount(autoE5217EA1_g, c_unitCountAll);
    for (;; autoE5217EA1_u -= 1) {
        autoE5217EA1_var = UnitGroupUnitFromEnd(autoE5217EA1_g, autoE5217EA1_u);
        if (autoE5217EA1_var == null) { break; }
        UnitGroupAddUnitGroup(lv_disruptionGroup, UnitCargoGroup(autoE5217EA1_var));
    }
    autoE1C3ADD0_g = lv_disruptionGroup;
    autoE1C3ADD0_u = UnitGroupCount(autoE1C3ADD0_g, c_unitCountAll);
    for (;; autoE1C3ADD0_u -= 1) {
        autoE1C3ADD0_var = UnitGroupUnitFromEnd(autoE1C3ADD0_g, autoE1C3ADD0_u);
        if (autoE1C3ADD0_var == null) { break; }
        UnitBehaviorRemovePlayer(autoE1C3ADD0_var, "HybridKorhalStun", gv_pLAYER_02_DOMINION3, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryRecovertheKeystoneCompleted_Init () {
    gt_VictoryRecovertheKeystoneCompleted = TriggerCreate("gt_VictoryRecovertheKeystoneCompleted_Func");
    TriggerAddEventTimePeriodic(gt_VictoryRecovertheKeystoneCompleted, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerExecute(gt_ObjectiveRecovertheKeystoneComplete, true, false);
    TriggerExecute(gt_ObjectiveRaynorsCommandCenterMustSurviveComplete, true, false);
    TriggerExecute(gt_ObjectiveValeriansCommandCenterMustSurviveComplete, true, false);
    Wait(2.0, c_timeReal);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementImmortalBuilt == false)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PKorhal02", gv_pLAYER_01_USER);
    }

    libVoiC_gf_CampaignAwardAchievement("PKorhal02_1", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_achievementAllyStructuresDestroyed <= 5)) {
        libVoiC_gf_CampaignAwardAchievement("PKorhal02_3", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/150D435C"), IntToText(gv_achievementDisruptedEnemyKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/22F9D96B"), IntToText(gv_achievementAllyStructuresDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F96ABEF8"), IntToText(gv_disruptionCount));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Mental Breakdown and Mastery
//--------------------------------------------------------------------------------------------------
bool gt_AchievementMentalBreakdownandMastery_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_disruptionActive == true))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gf_UnitisHybrid(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION4) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION5) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION8)))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementDisruptedEnemyKills += 1;
    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true)) {
        gv_masteryDisruptedStructureKills += 1;
    }

    if ((gv_achievementDisruptedEnemyKills >= 80) && (gv_disruptionAchievementFlagged == false)) {
        gv_disruptionAchievementFlagged = true;
        libVoiC_gf_CampaignAwardAchievement("PKorhal02_2", gv_pLAYER_01_USER);
    }

    if ((gv_masteryDisruptedStructureKills >= 55) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_masteryAchievementFlagged == false)) {
        gv_masteryAchievementFlagged = true;
        libVoiC_gf_CampaignAwardAchievement("Mastery_Korhal02", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementMentalBreakdownandMastery_Init () {
    gt_AchievementMentalBreakdownandMastery = TriggerCreate("gt_AchievementMentalBreakdownandMastery_Func");
    TriggerAddEventUnitDied(gt_AchievementMentalBreakdownandMastery, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Ally Structure Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_AchievementAllyStructureDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2)))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementAllyStructuresDestroyed += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementAllyStructureDestroyed_Init () {
    gt_AchievementAllyStructureDestroyed = TriggerCreate("gt_AchievementAllyStructureDestroyed_Func");
    TriggerAddEventUnitDied(gt_AchievementAllyStructureDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 10th Anniversary Achievement - Victory without constructing Immortals
//--------------------------------------------------------------------------------------------------
bool gt__10thAnniversaryAchievementVictorywithoutconstructingImmortals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Immortal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementImmortalBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__10thAnniversaryAchievementVictorywithoutconstructingImmortals_Init () {
    gt__10thAnniversaryAchievementVictorywithoutconstructingImmortals = TriggerCreate("gt__10thAnniversaryAchievementVictorywithoutconstructingImmortals_Func");
    TriggerAddEventUnitTrainProgress(gt__10thAnniversaryAchievementVictorywithoutconstructingImmortals, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover the Keystone Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecovertheKeystoneCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PKorhal02Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecovertheKeystoneCreate_Init () {
    gt_ObjectiveRecovertheKeystoneCreate = TriggerCreate("gt_ObjectiveRecovertheKeystoneCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover the Keystone Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecovertheKeystoneComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveRecovertheKeystoneCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal02Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecovertheKeystoneComplete_Init () {
    gt_ObjectiveRecovertheKeystoneComplete = TriggerCreate("gt_ObjectiveRecovertheKeystoneComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Raynor's Command Center Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRaynorsCommandCenterMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PKorhal02Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRaynorsCommandCenterMustSurviveCreate_Init () {
    gt_ObjectiveRaynorsCommandCenterMustSurviveCreate = TriggerCreate("gt_ObjectiveRaynorsCommandCenterMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Raynor's Command Center Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRaynorsCommandCenterMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveRaynorsCommandCenterMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRaynorsCommandCenterMustSurviveComplete_Init () {
    gt_ObjectiveRaynorsCommandCenterMustSurviveComplete = TriggerCreate("gt_ObjectiveRaynorsCommandCenterMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Raynor's Command Center Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRaynorsCommandCenterMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveRaynorsCommandCenterMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal02Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRaynorsCommandCenterMustSurviveFailed_Init () {
    gt_ObjectiveRaynorsCommandCenterMustSurviveFailed = TriggerCreate("gt_ObjectiveRaynorsCommandCenterMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Valerian's Command Center Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveValeriansCommandCenterMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PKorhal02Primary03");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveValeriansCommandCenterMustSurviveCreate_Init () {
    gt_ObjectiveValeriansCommandCenterMustSurviveCreate = TriggerCreate("gt_ObjectiveValeriansCommandCenterMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Valerian's Command Center Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveValeriansCommandCenterMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveValeriansCommandCenterMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal02Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveValeriansCommandCenterMustSurviveComplete_Init () {
    gt_ObjectiveValeriansCommandCenterMustSurviveComplete = TriggerCreate("gt_ObjectiveValeriansCommandCenterMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Valerian's Command Center Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveValeriansCommandCenterMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveValeriansCommandCenterMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal02Primary03", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveValeriansCommandCenterMustSurviveFailed_Init () {
    gt_ObjectiveValeriansCommandCenterMustSurviveFailed = TriggerCreate("gt_ObjectiveValeriansCommandCenterMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Research Facilities Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureResearchFacilitiesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PKorhal02Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PKorhal02Bonus01", gv_scienceFacilitiesSaved);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureResearchFacilitiesCreate_Init () {
    gt_ObjectiveSecureResearchFacilitiesCreate = TriggerCreate("gt_ObjectiveSecureResearchFacilitiesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Research Facilities Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureResearchFacilitiesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSecureResearchFacilitiesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal02Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureResearchFacilitiesComplete_Init () {
    gt_ObjectiveSecureResearchFacilitiesComplete = TriggerCreate("gt_ObjectiveSecureResearchFacilitiesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Research Facilities Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureResearchFacilitiesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSecureResearchFacilitiesCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PKorhal02Bonus01", gv_scienceFacilitiesSaved);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureResearchFacilitiesUpdate_Init () {
    gt_ObjectiveSecureResearchFacilitiesUpdate = TriggerCreate("gt_ObjectiveSecureResearchFacilitiesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5C6DB1AE_g;
    int auto5C6DB1AE_u;
    unit auto5C6DB1AE_var;
    unitgroup autoB07F3867_g;
    int autoB07F3867_u;
    unit autoB07F3867_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    UnitPauseAll(true);
    UnitGroupAdd(gv_cinematicPausedUnits, UnitFromId(45));
    auto5C6DB1AE_g = UnitGroup(null, c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C6DB1AE_u = UnitGroupCount(auto5C6DB1AE_g, c_unitCountAll);
    for (;; auto5C6DB1AE_u -= 1) {
        auto5C6DB1AE_var = UnitGroupUnitFromEnd(auto5C6DB1AE_g, auto5C6DB1AE_u);
        if (auto5C6DB1AE_var == null) { break; }
        if ((gf_UnitisHybrid(auto5C6DB1AE_var) == true)) {
            if ((auto5C6DB1AE_var != UnitFromId(1076))) {
                UnitGroupAdd(gv_introHybridGroup, auto5C6DB1AE_var);
            }

            UnitGroupAdd(gv_cinematicPausedUnits, auto5C6DB1AE_var);
            UnitGroupAdd(gv_cinematicHiddenUnits, auto5C6DB1AE_var);
        }

    }
    autoB07F3867_g = gv_cinematicHiddenUnits;
    autoB07F3867_u = UnitGroupCount(autoB07F3867_g, c_unitCountAll);
    for (;; autoB07F3867_u -= 1) {
        autoB07F3867_var = UnitGroupUnitFromEnd(autoB07F3867_g, autoB07F3867_u);
        if (autoB07F3867_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB07F3867_var, false);
    }
    UnitCreate(1, "HybridDominatorVoid", 0, gv_pLAYER_02_DOMINION4, UnitGetPosition(UnitFromId(1076)), 0.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand Angry", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9124B6EB_g;
    int auto9124B6EB_u;
    unit auto9124B6EB_var;
    const int auto16F73D59_n = 10;
    int auto16F73D59_i;
    const int autoF0C439E9_n = 2;
    int autoF0C439E9_i;
    fixed auto5C72160A_at;
    unitgroup autoEB089C04_g;
    int autoEB089C04_u;
    unit autoEB089C04_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_introRunning = true;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(308), 0.0, -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 50.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PKorhal02_Music_Intro_1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    auto9124B6EB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9124B6EB_u = UnitGroupCount(auto9124B6EB_g, c_unitCountAll);
    for (;; auto9124B6EB_u -= 1) {
        auto9124B6EB_var = UnitGroupUnitFromEnd(auto9124B6EB_g, auto9124B6EB_u);
        if (auto9124B6EB_var == null) { break; }
        if ((UnitGroupHasUnit(gv_cinematicPausedUnits, auto9124B6EB_var) == false)) {
            libNtve_gf_PauseUnit(auto9124B6EB_var, false);
        }

    }
    for (auto16F73D59_i = 1; auto16F73D59_i <= auto16F73D59_n; auto16F73D59_i += 1) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(16)), 180.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(166)), c_orderQueueReplace);
    }
    for (autoF0C439E9_i = 1; autoF0C439E9_i <= autoF0C439E9_n; autoF0C439E9_i += 1) {
        UnitCreate(1, "Marauder", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(16)), 180.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(166)), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(637), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(662), 8.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00045", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_IntroOrderRaynorsMarines, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00115", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PKorhal02_Music_Intro_2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_AttachModelToUnit(gv_ulnarKeystone, "Korhal_Keystone_Energy_Charge", "Ref_Origin");
    gv_introPowerUp = libNtve_gf_ActorLastCreated();
    gv_disruptionActive = true;
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 1.000000 2.000000", "SnowBlizzard", RegionEntireMap());
    GameSetLighting(gv_disruptionLight, 2.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PKorhal02_DisruptionOn", -1), PlayerGroupAll(), 150.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Korhal02_Quad_Amb_Camera_Shake", -1), PlayerGroupAll(), 150.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Korhal01_Quad_Amb_BG_Platform_Quake", -1), PlayerGroupAll(), 200.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_disruptionAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_DisruptionBehaviorUpdate, true, false);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(174), 1.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PKorhal02_Music_Intro_3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(856), 0.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00109", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_IntroHybridEntrance, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 50.0, 0.5);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_02_DOMINION3, PointFromId(166));
    gv_introHybridAttacker = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introHybridAttacker);
    UnitSetPropertyFixed(gv_introHybridAttacker, c_unitPropLifePercent, 70.0);
    UnitSetPropertyFixed(gv_introHybridAttacker, c_unitPropShieldsPercent, 70.0);
    libNtve_gf_ChangeUnitDamage(gv_introHybridAttacker, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    UnitIssueOrder(gv_introHybridAttacker, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(722)), c_orderQueueReplace);
    UnitIssueOrder(gv_introHybridAttacker, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(767)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introHybridAttacker, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(723)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introHybridAttacker, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(764)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(174), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(837), 10.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00110", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_IntroProtossReinforcements, true, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    auto5C72160A_at = 0;
    while (!((UnitIsAlive(gv_introHybridAttacker) == false)) && auto5C72160A_at <= 10.0) {
        Wait(0.1, c_timeGame);
        auto5C72160A_at = auto5C72160A_at + 0.1;
    }
    if ((UnitIsAlive(gv_introHybridAttacker) == true)) {
        UnitKill(gv_introHybridAttacker);
    }

    Wait(1.5, c_timeReal);
    libNtve_gf_KillModel(gv_introPowerUp);
    gv_disruptionActive = false;
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 0.000000 2.000000", "SnowBlizzard", RegionEntireMap());
    GameSetLighting(gv_normalLight, 2.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PKorhal02_DisruptionOff", -1), PlayerGroupAll(), 120.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PKorhal02_Disruption_PowerDown", -1), PlayerGroupAll(), 120.0, 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_normalAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_DisruptionBehaviorUpdate, true, false);
    autoEB089C04_g = UnitGroup("HybridDominatorVoid", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB089C04_u = UnitGroupCount(autoEB089C04_g, c_unitCountAll);
    for (;; autoEB089C04_u -= 1) {
        autoEB089C04_var = UnitGroupUnitFromEnd(autoEB089C04_g, autoEB089C04_u);
        if (autoEB089C04_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(autoEB089C04_var), c_animNameDefault);
        UnitSetFacing(autoEB089C04_var, 180.0, 0.0);
    }
    Wait(1.0, c_timeReal);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00052", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(856), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(851), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal02|Line00059", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00059", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00060", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_introRunning = false;
    UIHideTextCrawl(PlayerGroupAll());
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto29A21BDF_g;
    int auto29A21BDF_u;
    unit auto29A21BDF_var;
    unitgroup auto105FA042_g;
    int auto105FA042_u;
    unit auto105FA042_var;
    unitgroup auto6E435EC7_g;
    int auto6E435EC7_u;
    unit auto6E435EC7_var;
    unitgroup autoE8280E9D_g;
    int autoE8280E9D_u;
    unit autoE8280E9D_var;
    unitgroup autoC4BD4E8B_g;
    int autoC4BD4E8B_u;
    unit autoC4BD4E8B_var;
    unitgroup autoD1F05481_g;
    int autoD1F05481_u;
    unit autoD1F05481_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto29A21BDF_g = gv_cinematicTempUnits;
    auto29A21BDF_u = UnitGroupCount(auto29A21BDF_g, c_unitCountAll);
    for (;; auto29A21BDF_u -= 1) {
        auto29A21BDF_var = UnitGroupUnitFromEnd(auto29A21BDF_g, auto29A21BDF_u);
        if (auto29A21BDF_var == null) { break; }
        UnitRemove(auto29A21BDF_var);
    }
    UnitPauseAll(false);
    auto105FA042_g = gv_cinematicHiddenUnits;
    auto105FA042_u = UnitGroupCount(auto105FA042_g, c_unitCountAll);
    for (;; auto105FA042_u -= 1) {
        auto105FA042_var = UnitGroupUnitFromEnd(auto105FA042_g, auto105FA042_u);
        if (auto105FA042_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto105FA042_var, true);
    }
    UnitSetOwner(UnitFromId(835), 0, true);
    auto6E435EC7_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E435EC7_u = UnitGroupCount(auto6E435EC7_g, c_unitCountAll);
    for (;; auto6E435EC7_u -= 1) {
        auto6E435EC7_var = UnitGroupUnitFromEnd(auto6E435EC7_g, auto6E435EC7_u);
        if (auto6E435EC7_var == null) { break; }
        UnitSetPropertyFixed(auto6E435EC7_var, c_unitPropLifePercent, 100.0);
    }
    autoE8280E9D_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(19), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8280E9D_u = UnitGroupCount(autoE8280E9D_g, c_unitCountAll);
    for (;; autoE8280E9D_u -= 1) {
        autoE8280E9D_var = UnitGroupUnitFromEnd(autoE8280E9D_g, autoE8280E9D_u);
        if (autoE8280E9D_var == null) { break; }
        UnitSetPropertyFixed(autoE8280E9D_var, c_unitPropLifePercent, 50.0);
    }
    autoC4BD4E8B_g = UnitGroup("SCV", gv_pLAYER_02_DOMINION2, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4BD4E8B_u = UnitGroupCount(autoC4BD4E8B_g, c_unitCountAll);
    for (;; autoC4BD4E8B_u -= 1) {
        autoC4BD4E8B_var = UnitGroupUnitFromEnd(autoC4BD4E8B_g, autoC4BD4E8B_u);
        if (autoC4BD4E8B_var == null) { break; }
        libNtve_gf_PauseUnit(autoC4BD4E8B_var, true);
    }
    autoD1F05481_g = gv_introRaynorsGroup;
    autoD1F05481_u = UnitGroupCount(autoD1F05481_g, c_unitCountAll);
    for (;; autoD1F05481_u -= 1) {
        autoD1F05481_var = UnitGroupUnitFromEnd(autoD1F05481_g, autoD1F05481_u);
        if (autoD1F05481_var == null) { break; }
        AISetUnitScriptControlled(autoD1F05481_var, false);
    }
    libVCMI_gf_StopCinematicSounds();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_normalAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(43), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(45), true, false);
    gv_disruptionActive = false;
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity", "SnowBlizzard", RegionEntireMap());
    GameSetLighting(gv_normalLight, 0.0);
    TriggerExecute(gt_DisruptionBehaviorUpdate, true, false);
    libNtve_gf_KillModel(gv_introPowerUp);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(178), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Protoss Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_IntroProtossReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_introImmortals;

    // Automatic Variable Declarations
    unitgroup autoFC22266B_g;
    int autoFC22266B_u;
    unit autoFC22266B_var;
    unitgroup autoBE4F0DCA_g;
    int autoBE4F0DCA_u;
    unit autoBE4F0DCA_var;

    // Variable Initialization
    lv_introImmortals = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Hybrid_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, gv_pLAYER_01_USER, PointFromId(170));
    UnitGroupAdd(lv_introImmortals, UnitLastCreated());
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, gv_pLAYER_01_USER, PointFromId(172));
    UnitGroupAdd(lv_introImmortals, UnitLastCreated());
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    autoFC22266B_g = lv_introImmortals;
    autoFC22266B_u = UnitGroupCount(autoFC22266B_g, c_unitCountAll);
    for (;; autoFC22266B_u -= 1) {
        autoFC22266B_var = UnitGroupUnitFromEnd(autoFC22266B_g, autoFC22266B_u);
        if (autoFC22266B_var == null) { break; }
        UnitSetState(autoFC22266B_var, c_unitStateStunned, true);
        libNtve_gf_SendActorMessageToUnit(autoFC22266B_var, "ModelSwap ImmortalWarpIn");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoFC22266B_var), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(autoFC22266B_var), c_animNameDefault, 50.0);
    }
    Wait(2.5, c_timeGame);
    if ((gv_introRunning == false)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoBE4F0DCA_g = lv_introImmortals;
    autoBE4F0DCA_u = UnitGroupCount(autoBE4F0DCA_g, c_unitCountAll);
    for (;; autoBE4F0DCA_u -= 1) {
        autoBE4F0DCA_var = UnitGroupUnitFromEnd(autoBE4F0DCA_g, autoBE4F0DCA_u);
        if (autoBE4F0DCA_var == null) { break; }
        UnitRemove(autoBE4F0DCA_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(170));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_introHybridAttacker), c_orderQueueReplace);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(172));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_introHybridAttacker), c_orderQueueReplace);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroProtossReinforcements_Init () {
    gt_IntroProtossReinforcements = TriggerCreate("gt_IntroProtossReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Hybrid Entrance
//--------------------------------------------------------------------------------------------------
bool gt_IntroHybridEntrance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_warpPoint;

    // Automatic Variable Declarations
    unitgroup auto82EB6600_g;
    int auto82EB6600_u;
    unit auto82EB6600_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto82EB6600_g = gv_introHybridGroup;
    auto82EB6600_u = UnitGroupCount(auto82EB6600_g, c_unitCountAll);
    for (;; auto82EB6600_u -= 1) {
        auto82EB6600_var = UnitGroupUnitFromEnd(auto82EB6600_g, auto82EB6600_u);
        if (auto82EB6600_var == null) { break; }
        if ((gv_introRunning == false)) {
            return true;
        }

        gf_WarpInHybridCinematic(UnitGetPosition(auto82EB6600_var), UnitGetType(auto82EB6600_var), UnitGetOwner(auto82EB6600_var));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroHybridEntrance_Init () {
    gt_IntroHybridEntrance = TriggerCreate("gt_IntroHybridEntrance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Order Raynors Marines
//--------------------------------------------------------------------------------------------------
bool gt_IntroOrderRaynorsMarines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto095927C4_g;
    int auto095927C4_u;
    unit auto095927C4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto095927C4_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto095927C4_u = UnitGroupCount(auto095927C4_g, c_unitCountAll);
    for (;; auto095927C4_u -= 1) {
        auto095927C4_var = UnitGroupUnitFromEnd(auto095927C4_g, auto095927C4_u);
        if (auto095927C4_var == null) { break; }
        UnitGroupAdd(gv_introRaynorsGroup, auto095927C4_var);
    }
    UnitGroupIssueOrder(gv_introRaynorsGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(166)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroOrderRaynorsMarines_Init () {
    gt_IntroOrderRaynorsMarines = TriggerCreate("gt_IntroOrderRaynorsMarines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_victoryKeystoneModel;
    unitgroup lv_disruptionGroup;

    // Automatic Variable Declarations
    playergroup autoBD05EB41_g;
    int autoBD05EB41_var;
    playergroup auto6DD7B2F0_g;
    int auto6DD7B2F0_var;
    unitgroup auto4A593EDB_g;
    int auto4A593EDB_u;
    unit auto4A593EDB_var;
    unitgroup autoFE6CA62C_g;
    int autoFE6CA62C_u;
    unit autoFE6CA62C_var;
    unitgroup auto250051FF_g;
    int auto250051FF_u;
    unit auto250051FF_var;
    unitgroup autoE7975A4A_g;
    int autoE7975A4A_u;
    unit autoE7975A4A_var;
    unitgroup auto29EEDEAF_g;
    int auto29EEDEAF_u;
    unit auto29EEDEAF_var;
    unitgroup auto1789EA34_g;
    int auto1789EA34_u;
    unit auto1789EA34_var;
    unitgroup autoFA370410_g;
    int autoFA370410_u;
    unit autoFA370410_var;
    unitgroup auto62F47615_g;
    int auto62F47615_u;
    unit auto62F47615_var;

    // Variable Initialization
    lv_disruptionGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity", "SnowBlizzard", RegionEntireMap());
    TriggerStop(gt_DisruptionCycle);
    SoundStop(gv_disruptionSound, true);
    autoBD05EB41_g = gv_dominionGroup;
    autoBD05EB41_var = -1;
    while (true) {
        autoBD05EB41_var = PlayerGroupNextPlayer(autoBD05EB41_g, autoBD05EB41_var);
        if (autoBD05EB41_var < 0) { break; }
        PlayerModifyPropertyInt(autoBD05EB41_var, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 100);
        UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, autoBD05EB41_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    auto6DD7B2F0_g = gv_enemyPlayers;
    auto6DD7B2F0_var = -1;
    while (true) {
        auto6DD7B2F0_var = PlayerGroupNextPlayer(auto6DD7B2F0_g, auto6DD7B2F0_var);
        if (auto6DD7B2F0_var < 0) { break; }
        UnitGroupAddUnitGroup(lv_disruptionGroup, UnitGroup(null, auto6DD7B2F0_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    auto4A593EDB_g = lv_disruptionGroup;
    auto4A593EDB_u = UnitGroupCount(auto4A593EDB_g, c_unitCountAll);
    for (;; auto4A593EDB_u -= 1) {
        auto4A593EDB_var = UnitGroupUnitFromEnd(auto4A593EDB_g, auto4A593EDB_u);
        if (auto4A593EDB_var == null) { break; }
        UnitBehaviorRemovePlayer(auto4A593EDB_var, "HybridKorhalStun", gv_pLAYER_02_DOMINION3, 1);
    }
    autoFE6CA62C_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE6CA62C_u = UnitGroupCount(autoFE6CA62C_g, c_unitCountAll);
    for (;; autoFE6CA62C_u -= 1) {
        autoFE6CA62C_var = UnitGroupUnitFromEnd(autoFE6CA62C_g, autoFE6CA62C_u);
        if (autoFE6CA62C_var == null) { break; }
        UnitRemove(autoFE6CA62C_var);
    }
    auto250051FF_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto250051FF_u = UnitGroupCount(auto250051FF_g, c_unitCountAll);
    for (;; auto250051FF_u -= 1) {
        auto250051FF_var = UnitGroupUnitFromEnd(auto250051FF_g, auto250051FF_u);
        if (auto250051FF_var == null) { break; }
        UnitRemove(auto250051FF_var);
    }
    autoE7975A4A_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE7975A4A_u = UnitGroupCount(autoE7975A4A_g, c_unitCountAll);
    for (;; autoE7975A4A_u -= 1) {
        autoE7975A4A_var = UnitGroupUnitFromEnd(autoE7975A4A_g, autoE7975A4A_u);
        if (autoE7975A4A_var == null) { break; }
        UnitRemove(autoE7975A4A_var);
    }
    auto29EEDEAF_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29EEDEAF_u = UnitGroupCount(auto29EEDEAF_g, c_unitCountAll);
    for (;; auto29EEDEAF_u -= 1) {
        auto29EEDEAF_var = UnitGroupUnitFromEnd(auto29EEDEAF_g, auto29EEDEAF_u);
        if (auto29EEDEAF_var == null) { break; }
        UnitRemove(auto29EEDEAF_var);
    }
    auto1789EA34_g = UnitGroup(null, gv_pLAYER_02_DOMINION8, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1789EA34_u = UnitGroupCount(auto1789EA34_g, c_unitCountAll);
    for (;; auto1789EA34_u -= 1) {
        auto1789EA34_var = UnitGroupUnitFromEnd(auto1789EA34_g, auto1789EA34_u);
        if (auto1789EA34_var == null) { break; }
        UnitRemove(auto1789EA34_var);
    }
    autoFA370410_g = UnitGroup(null, c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFA370410_u = UnitGroupCount(autoFA370410_g, c_unitCountAll);
    for (;; autoFA370410_u -= 1) {
        autoFA370410_var = UnitGroupUnitFromEnd(autoFA370410_g, autoFA370410_u);
        if (autoFA370410_var == null) { break; }
        UnitRemove(autoFA370410_var);
    }
    auto62F47615_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto62F47615_u = UnitGroupCount(auto62F47615_g, c_unitCountAll);
    for (;; auto62F47615_u -= 1) {
        auto62F47615_var = UnitGroupUnitFromEnd(auto62F47615_g, auto62F47615_u);
        if (auto62F47615_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto62F47615_var) == false) && (auto62F47615_var != gv_ulnarKeystone)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto62F47615_var);
            libNtve_gf_PauseUnit(auto62F47615_var, true);
            if (((UnitGetType(auto62F47615_var) == libVoiC_gf_EnabledUnitTypeforArmyCategory("Sentry")))) {
                UnitCreate(1, UnitGetType(auto62F47615_var), 0, UnitGetOwner(auto62F47615_var), UnitGetPosition(auto62F47615_var), UnitGetFacing(auto62F47615_var));
                UnitGroupAdd(gv_cinematicPausedUnits, UnitLastCreated());
                libNtve_gf_PauseUnit(UnitLastCreated(), true);
                UnitRemove(auto62F47615_var);
            }

        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(960), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PKorhal02_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(317), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal02|Line00099", true), c_soundIndexAny)) + 2.0), -1, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitBehaviorAdd(gv_ulnarKeystone, "ObjectiveCollectionBeam", gv_ulnarKeystone, 1);
    SoundPlayForPlayer(SoundLink("Event_Kor02_VictoryCine_Beam", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1084), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1083), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal02|Line00129", true), c_soundIndexAny)) + 2.0), -1, 10.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal02|Line00129", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal02|Line00129", true), c_soundIndexAny)) / 2.0));
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(638), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(833), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal02|Line00129", true), c_soundIndexAny)) + 2.0), -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 4.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    TransmissionClearAll();
    UISetWorldVisible(PlayerGroupAll(), false);
    UnitPauseAll(true);
    Wait(2.0, c_timeReal);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    libVoiC_gf_PlayCinematic("KorhalEnd", false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DudesCarDestroyedAgainQ_Init();
    gt_StartGameQ_Init();
    gt_ImmortalQ_Init();
    gt_RaynorIntroQ_Init();
    gt_ValerianIntroQ_Init();
    gt_HybridBreakStuff_Init();
    gt_DisruptionCycle_Init();
    gt_DisruptionSoonQ_Init();
    gt_DisruptionBehaviorUpdate_Init();
    gt_DisruptionCycleOffQ_Init();
    gt_DisruptionStunHintQ_Init();
    gt_EnemyCampInit_Init();
    gt_EnemyCampController_Init();
    gt_UpdateBonusObjective_Init();
    gt_BonusObjectiveWait_Init();
    gt_BonusObjectiveIntroQ_Init();
    gt_BonusObjectiveIntroTripwire_Init();
    gt_BonusIntroTransmissionQ_Init();
    gt_BonusUpdateMiddleQ_Init();
    gt_BonusUpdateNorthQ_Init();
    gt_BonusUpdateSouthQ_Init();
    gt_BonusCompleteQ_Init();
    gt_MedicSupportCenter_Init();
    gt_SciVesselSupportNorth_Init();
    gt_MedivacSupportSouth_Init();
    gt_RaynorDayWaves_Init();
    gt_ActivateBulliesRaynorForward1_Init();
    gt_ActivateBulliesRaynorForward2_Init();
    gt_RaynorForward1Q_Init();
    gt_RaynorForward2Q_Init();
    gt_RaynorWaveBoost_Init();
    gt_ValerianDayWaves_Init();
    gt_ValerianDayWavesQ_Init();
    gt_ActivateBulliesValerianForward1_Init();
    gt_ActivateBulliesValerianForward2_Init();
    gt_ValerianForward1Q_Init();
    gt_ValerianForward2Q_Init();
    gt_ValerianWaveBoost_Init();
    gt_MoebiusCorpsPlayerWaveController_Init();
    gt_MoebiusCorpsAttacksArtanisQ_Init();
    gt_MoebiusCorpsNorthWaves_Init();
    gt_MoebiusCorpsSouthWaves_Init();
    gt_DeactivateBulliesMoebiusCorpsNorthForward1_Init();
    gt_DeactivateBulliesMoebiusCorpsNorthForward2_Init();
    gt_DeactivateBulliesMoebiusCorpsSouthForward1_Init();
    gt_DeactivateBulliesMoebiusCorpsSouthForward2_Init();
    gt_HybridWaveController_Init();
    gt_HybridAttacksQ_Init();
    gt_HybridWaveDeadQ_Init();
    gt_UpdateBullyStatus_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_SetAIUpgradeLevel_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatAllyDead_Init();
    gt_VictoryRecovertheKeystoneCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementMentalBreakdownandMastery_Init();
    gt_AchievementAllyStructureDestroyed_Init();
    gt__10thAnniversaryAchievementVictorywithoutconstructingImmortals_Init();
    gt_ObjectiveRecovertheKeystoneCreate_Init();
    gt_ObjectiveRecovertheKeystoneComplete_Init();
    gt_ObjectiveRaynorsCommandCenterMustSurviveCreate_Init();
    gt_ObjectiveRaynorsCommandCenterMustSurviveComplete_Init();
    gt_ObjectiveRaynorsCommandCenterMustSurviveFailed_Init();
    gt_ObjectiveValeriansCommandCenterMustSurviveCreate_Init();
    gt_ObjectiveValeriansCommandCenterMustSurviveComplete_Init();
    gt_ObjectiveValeriansCommandCenterMustSurviveFailed_Init();
    gt_ObjectiveSecureResearchFacilitiesCreate_Init();
    gt_ObjectiveSecureResearchFacilitiesComplete_Init();
    gt_ObjectiveSecureResearchFacilitiesUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroProtossReinforcements_Init();
    gt_IntroHybridEntrance_Init();
    gt_IntroOrderRaynorsMarines_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
